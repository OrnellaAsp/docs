{
    "docs": [
        {
            "location": "/", 
            "text": "Asperato developer documentation\n\n\nThis documentation is designed for developers who are performing an Asperato integration.\n\n\nOverview\n\n\nIf you would like a general overview of how a payment works when taken through Asperato, this is a good place to start.\n\n\nTemplate documentation\n\n\nThis page\n covers customising a template to work with Asperato.\n\n\nSalesforce documentation\n\n\nThis page\n covers the creation of a custom Salesforce package to work with Asperato.\n\n\nNeed help?\n\n\nIf you requrie any assistance with your integration then please contact support@asperato.com, we'll aim to get back to you in a couple of working days.\n\n\nSource\n\n\nThese documents are written in Markdown and \nhosted on GitHub\n. Feel free to create an issue or submit a pull request if you spot a mistake.", 
            "title": "Home"
        }, 
        {
            "location": "/#asperato-developer-documentation", 
            "text": "This documentation is designed for developers who are performing an Asperato integration.", 
            "title": "Asperato developer documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "If you would like a general overview of how a payment works when taken through Asperato, this is a good place to start.", 
            "title": "Overview"
        }, 
        {
            "location": "/#template-documentation", 
            "text": "This page  covers customising a template to work with Asperato.", 
            "title": "Template documentation"
        }, 
        {
            "location": "/#salesforce-documentation", 
            "text": "This page  covers the creation of a custom Salesforce package to work with Asperato.", 
            "title": "Salesforce documentation"
        }, 
        {
            "location": "/#need-help", 
            "text": "If you requrie any assistance with your integration then please contact support@asperato.com, we'll aim to get back to you in a couple of working days.", 
            "title": "Need help?"
        }, 
        {
            "location": "/#source", 
            "text": "These documents are written in Markdown and  hosted on GitHub . Feel free to create an issue or submit a pull request if you spot a mistake.", 
            "title": "Source"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview and responsibilities\n\n\nAn overview of the payment lifecycle can be viewed in the following diagram:\n\n\n\n\nDetailed overview\n\n\n\n\n\n\nUser loads customer website\n The payment journey will always start from the customer website - the user may click a link to donate, go to a checkout after inserting some items in a basket, or any other action that requires a payment to be taken.\n\n\n\n\n\nUser enters details unrelated to payments\n \nThis step is optional.\n Asperato will, by default, collect all data required to process a payment. However, many customers wish to collect other data that will also populate the Salesforce record - eg. \"How did you hear about us\" questions. If this type of data is required, it should be collected at this point.\n\n\n\n\n\nPayment record is created in Salesforce\n The Asperato ONE package provides a webservice to create a default, empty payment record that can then be used to take a payment. Where payment options do not need to be customised, this is the simplest approach, and the responsibility of creating the record lies with the Asperato ONE package.\n\nHowever, where a greater level of customisation is required, the payment record can be created via any other means in Salesforce. This custom route allows intelligent customisation of the payment page based on any data available - eg. if the amount is greater than $1000, you may choose to only allow credit cards, if the payor is in the UK you may wish to only allow direct debit, etc.\n\n\n\n\n\nCustomisable Asperato payment page is shown\n A URL is generated from the payment record after its creation, and this URL will show the payment page for this particular payment. By default, Asperato provide a fully working, customisable and responsive payment page that opens in a new window to take the payment. However, the template may be customised extensively if required (see Template Documentation) and may also be inlined into your own website via an iframe for a smoother user journey.\n\n\n\n\n\nUser enters details relating to payment\n The user enters all the payment details on the securely hosted Asperato payment page.\n\n\n\n\n\nUser submits payment details to Asperato\n The user presses the submit button on the payment page, which sends the payment details to the Asperato server.\n\n\n\n\n\nAsperato communicates with PSPs (Payment Service Providers)\n Asperato receives the payment details and then communicates with the PSP that is set up for the given customer and payment route (Stripe, Sagepay, GoCardless, Paypal, etc.)\n\n\n\n\n\nAsperato updates the relevant payment record in Salesforce\n After the PSP has responded, Asperato will update the payment object with the relevant details. If the transaction has failed then Asperato will report the reason for failure; if the transaction is successful Asperato will update the payment with the payor details. If there is an error in Salesforce that causes the record not to update for any reason (and Salesforce reports this error), we will email details of the issue to a pre-configured email address or mailing list.\n\n\n\n\n\nAsperato displays the exit or error page\n If the transaction was successful, Asperato will display an \"exit page\", otherwise will display an \"error page\". Similarly to the payment page, both the exit and error page are provided by default, but can also be extensively customised.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview-and-responsibilities", 
            "text": "An overview of the payment lifecycle can be viewed in the following diagram:", 
            "title": "Overview and responsibilities"
        }, 
        {
            "location": "/overview/#detailed-overview", 
            "text": "User loads customer website  The payment journey will always start from the customer website - the user may click a link to donate, go to a checkout after inserting some items in a basket, or any other action that requires a payment to be taken.   User enters details unrelated to payments   This step is optional.  Asperato will, by default, collect all data required to process a payment. However, many customers wish to collect other data that will also populate the Salesforce record - eg. \"How did you hear about us\" questions. If this type of data is required, it should be collected at this point.   Payment record is created in Salesforce  The Asperato ONE package provides a webservice to create a default, empty payment record that can then be used to take a payment. Where payment options do not need to be customised, this is the simplest approach, and the responsibility of creating the record lies with the Asperato ONE package. \nHowever, where a greater level of customisation is required, the payment record can be created via any other means in Salesforce. This custom route allows intelligent customisation of the payment page based on any data available - eg. if the amount is greater than $1000, you may choose to only allow credit cards, if the payor is in the UK you may wish to only allow direct debit, etc.   Customisable Asperato payment page is shown  A URL is generated from the payment record after its creation, and this URL will show the payment page for this particular payment. By default, Asperato provide a fully working, customisable and responsive payment page that opens in a new window to take the payment. However, the template may be customised extensively if required (see Template Documentation) and may also be inlined into your own website via an iframe for a smoother user journey.   User enters details relating to payment  The user enters all the payment details on the securely hosted Asperato payment page.   User submits payment details to Asperato  The user presses the submit button on the payment page, which sends the payment details to the Asperato server.   Asperato communicates with PSPs (Payment Service Providers)  Asperato receives the payment details and then communicates with the PSP that is set up for the given customer and payment route (Stripe, Sagepay, GoCardless, Paypal, etc.)   Asperato updates the relevant payment record in Salesforce  After the PSP has responded, Asperato will update the payment object with the relevant details. If the transaction has failed then Asperato will report the reason for failure; if the transaction is successful Asperato will update the payment with the payor details. If there is an error in Salesforce that causes the record not to update for any reason (and Salesforce reports this error), we will email details of the issue to a pre-configured email address or mailing list.   Asperato displays the exit or error page  If the transaction was successful, Asperato will display an \"exit page\", otherwise will display an \"error page\". Similarly to the payment page, both the exit and error page are provided by default, but can also be extensively customised.", 
            "title": "Detailed overview"
        }, 
        {
            "location": "/sf/", 
            "text": "Asperato ONE Salesforce package\n\n\nThe core package consists of three custom objects and a set of web services that communicate between Asperato and Salesforce.  The web services are all managed through Apex classes.  The package is designed to be extensible so that the package web service classes can be replaced by custom Apex code if that is required.  \n\n\nThere are simple VisualForce pages to support each of the data objects and tabs accessing these are grouped together into an Asperato application.\n\n\nThe configuration of the package is managed via Custom Metadata.  There are two Metadata Types, Asperato Settings and Service Handler.  The options available for these settings are described below.\n\n\nNote that this package is available for: Lightning Enterprise \n Lightning Unlimited only.  For further information please see \nhttps://www.salesforce.com/uk/editions-pricing/sales-cloud/\n\n\nDesign overview\n\n\nThe web journey\n\n\nThe web journey is where a payment or an authorisation is set up via screens that require interaction from a paying person.  This is typically through links in a website, links sent in email communications or direct from Salesforce via a button or a link.\n\n\nThe journey starts with a URL that invokes an Asperato program.  The URL will contain at least one parameter (\npmRef\n) and might have several more.  This are described more fully elsewhere.  The parameters are used to:\n\n  * Obtain configuration from Asperato using the \npmRef\n parameter.\n\n  * Obtain data from Salesforce using either the GetAuthorisations REST webservice or the GetPayments REST webservice.  The requests and responses for these services are described fully elsewhere in this documentation.\n\n\nThe Asperato program combines the configuration and the data to create a dynamic web screen that is then displayed to the person making the payment in a web browser.\n\nThe payer then enters data to the web screen and control then passes to another Asperato program.\n\nThis second program accepts and validates the data input and then calls the relevant payment gateway.\n\nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.\n\nAsperato then displays the outcome of the whole transaction on either a success or a fail screen.\n\n\nThe automatic (repeat) payment journey\n\n\nThe automatic payment journey is the process by which a payment can be taken without the need for screen input on behalf of the payer based on an authorisation that has already been put in place.  This authorisation is typically a Direct Debit mandate or a card continuous payment authority.\n\n\nThe journey starts in Salesforce where suitable code creates a list of payments that are due for collection.  \n\nThis list of payments is then sent to Asperato using a REST web service.\n\nAsperato then applies validation to each line in the list and either accepts or rejects the individual request line.\n\nFor those lines that are accepted Asperato calls the relevant gateway. \n\nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.\n\n\nTerminology\n\n\nIn Asperato terms an Authorisation is a record of an authority given by a payer to collect automatic payments.  This will take the physical form of either a Direct Debit mandate or a card Continuous Payment Authorisation (CPA).  Creating an authority does not take money from the associated account, it merely sets up the mechanism to allow that to happen in the future.  There are rules in force about what you have to tell the payer when you set up an authority and when you take payments using it.  Those rules vary depending on the payment route you are using.\n\n\nA Payment is a financial transaction.  This can include a refund. Its key attributes are that is has an amount, currency, a due date and a payment route.\n\n\nIn Asperato terms an Automatic or Repeat payment is defined as where:\n\nThe payment frequency is not \u2018Single\u2019.\n\nThe payment frequency is \u2018Single\u2019 but the payment due date is in the future.\n\nThe payment route is either BACS or SEPA since these require authorisations even for one off payments\n\n\nPayment scenarios\n\n\nBasic actions on the data in Salesforce:\n\n(a) Create new \nAuthorisation\n row\n\n(b) Update existing \nAuthorisation\n row\n\n(c) Create a new \nPaymen\nt row\n\n(d) Update an existing \nPayment\n row\n\n\nThese are the data scenarios that the package is designed to deal with:\n\n\n  \n\n    \nScenario\n\n    \nAction\n\n  \n\n  \n\n    \nNew authority where no data currently exists\n\n    \n(a)\n\n  \n\n  \n\n    \nNew authority where an \nAuthorisation\n row already exists\n\n    \n(b)\n\n  \n\n  \n\n    \nUpdate to an existing authority\n\n    \n(b)\n\n  \n\n  \n\n    \nSingle payment where no data currently exists\n\n    \n(c)\n\n  \n\n  \n\n    \nSingle payment where a \nPayment\n row already exists\n\n    \n(d)\n\n  \n\n  \n\n    \nRepeat payment where where no data currently exists on either \nAuthorisation\n or \nPayment\n\n    \n(a) + (c)\n\n  \n\n  \n\n    \nRepeat payment where where no data currently exists on \nPayment\n but an \nAuthorisation\n row exists\n\n    \n(b) + (c)\n\n  \n\n  \n\n    \nRepeat payment where where data exists on \nPayment\n but no related \nAuthorisation\n row exists\n\n    \n(a) + (d)\n\n  \n\n  \n\n    \nRepeat payment where where rows exist on both \nAuthorisation\n and \nPayment\n\n    \n(b) + (d)\n\n  \n\n  \n\n    \nSubsequent repeat payment (i.e. an automatic payment)\n\n    \n(b) + (d)\n\n  \n\n\n\n\nThe data objects\n\n\nThe package data objects are called \nPayment\n, \nSubscription\n and \nAuthorisation\n and they are related to each other as per the diagram below.\n\n\n\n\nAuthorisation\n\n\nAuthorisation contains data relating to an authority to collect payments.  This can take the form of either a Direct Debit mandate or a card continuous payment authority.\n\n\nThe fields and their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAccount Name\n\n    \nRecords the name on the bank account or the cardholder name for future reference.\n\n  \n\n  \n\n    \nAccount Reference\n\n    \nA partially obscured record of the bank account or credit card number for future reference.\n\n  \n\n  \n\n    \nAsperato Repeat Token\n\n    \nOne of a pair of fields needed to make a repeat payment request.\n\n  \n\n  \n\n    \nBilling Address City\n\n    \nRecords the city in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Country\n\n    \nRecords the country in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address PostalCode\n\n    \nRecords the postal code in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address State\n\n    \nRecords the state/county in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Street\n\n    \nRecords the street(s) in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nCancel Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the cancel link on the payment page.\n\n  \n\n  \n\n    \nCard Type\n\n    \nThe type of credit or debit card, or `Not Applicable` for the other Authorisation Types.\n\n  \n\n  \n\n    \nCompany Name\n\n    \nRecords the company name that was captured on the payment page.\n\n  \n\n  \n\n    \nCPA Granted\n\n    \nIndicates that the customer has given permission for card details to be used to collect automatic payments.\n\n  \n\n  \n\n    \nDirect Debit Error Code\n\n    \nIn the event that the BACS system passes back an error response this will contain the raw BACS error code.\n\n  \n\n  \n\n    \neCommerce URL\n\n    \nThis is the URL needed to invoke the Asperato paypage is an eCommerce situation.  For example, this can be used to email someone a link by which to make a payment.\n\n  \n\n  \n\n    \nEmail\n\n    \nRecords the email address that was captured on the payment page.\n\n  \n\n  \n\n    \nExpiry Date\n\n    \nThe date on the which the authorisation will expire (if applicable).\n\n  \n\n  \n\n    \nFail Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the 'Finished' button on the transaction error response screen.\n\n  \n\n  \n\n    \nFirst Name\n\n    \nRecords the first name that was captured on the payment page.\n\n  \n\n  \n\n    \nLast Name\n\n    \nRecords the last name that was captured on the payment page.\n\n  \n\n  \n\n    \nMandate Reference\n\n    \nThe reference for a Direct Debit mandate that will need to be displayed to the end customer in emails and other communication.\n\n  \n\n  \n\n    \nPayment Route Options\n\n    \nOne or more of of:\n      \n\n        \nCard\n Credit or debit card\n\n        \nDirect Debit\n Direct Debit\n\n        \neCheck\n   US Bank payment\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nPayment Service Provider Repeat Token\n\n    \nOne of a pair of fields needed to make a repeat payment request.\n\n  \n\n  \n\n    \nStatus\n\n    \nThe status of the authorisation.  Can be one of:\n      \n\n        \nPending\n Has been created but is not yet active\n\n        \nIn Force\n In force and ready to use\n\n        \nCancelled\n Has been stopped\n\n        \nFailed\n Has failed for some reason\n\n      \n\n    \n\n  \n\n  \n\n    \nStatus Description\n\n    \nA descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example.\n\n  \n\n  \n\n    \nSuccess Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the 'Finished' button on the transaction success response screen.\n\n  \n\n\n\n\n\nPayment Schedule\n\n\nPayment Schedule contains the information needed to drive the creation of payments where they need to recur automatically.\n\n\nPayment Schedule has a lookup relationship with Authorisation.\n\n\nThe fields are their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAuthorisation\n\n    \nA link to the related Authorisation object.  A subscription must have and entry here in order to process a payment.\n\n  \n\n  \n\n    \nAuthorisation Status\n\n    \nA formula reflecting the status of the associated Authorisation.\n\n  \n\n  \n\n    \nFinal Payment Date\n\n    \nAfter this date no more payments will be taken from this payment schedule\n\n  \n\n  \n\n    \nFrequency\n\n    \nThe payment frequency for the subscription. One of:\n      \n\n        \nSingle\n\n        \nDaily\n\n        \nWeekly\n\n        \nMonthly\n\n        \nQuarterly\n\n        \nSemi-annual\n\n        \nAnnual\n\n      \n\n    \n\n  \n\n  \n\n    \nLast Payment Date\n\n    \nThe date on which the last payment schedule payment request was raised.\n\n  \n\n  \n\n    \nNext Payment Date\n\n    \nThe date on which the next payment request will be raised.\n\n  \n\n  \n\n    \nNext Process Date\n\n    \nA formula that calculates the next date on which a payment request should be processed.  This takes into account ant delay caused by Direct Debit processing\n\n  \n\n  \n\n    \nPayment Route Selected\n\n    \nA formula reflecting the selected payment route of the associated Authorisation.\n\n  \n\n  \n\n    \nRegular Amount\n\n    \nThe amount of the subscription charge.  The currency will be determined based on the currency of the Subscription record in a multi-currency org or from the org default currency for a single currency org.\n\n  \n\n  \n\n    \nStatus\n\n    \nThe status of the subscription.  Can be one of:\n      \n\n        \nActive\n In force and ready to use\n\n        \nInactive\n Has been stopped\n\n        \nExpired\n Has been stopped because the Final Payment Date has been reached\n\n      \n\n    \n\n  \n\n\n\n\n\nPayment\n\n\nPayment contains both the request for a payment to occur and also the response once it has been processed.\n\n\nPayment has a lookup relationship to both Authorisation and Subscription.\n\n\nThe fields are their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAccount Name\n\n    \nRecords the name on the bank account or the cardholder name for future reference.\n\n  \n\n  \n\n    \nAccount Reference\n\n    \nA partially obscured record of the bank account or credit card number for future reference.\n\n  \n\n  \n\n    \nAmount\n\n    \nThe amount of the payment.  Will contain either the requested amount of the amount actually collected depending on the status of the payment.\n\n  \n\n  \n\n    \nAsperato Reference\n\n    \nA unique reference to the payment transaction generated by Asperato and reflected through to the payment gateway.\n\n  \n\n  \n\n    \nAsperato Repeat Token\n\n    \nA formula reflecting the Asperato Repeat Token from the associated authoriisation if appropriate.  Contains the text \"Not set up yet\" if there is no value.\n\n  \n\n  \n\n    \nAuthorisation\n\n    \nA link to the related Authorisation object if appropriate.\n\n  \n\n  \n\n    \nBilling Address City\n\n    \nRecords the city in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Country\n\n    \nRecords the country in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address PostalCode\n\n    \nRecords the postal code in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address State\n\n    \nRecords the state/county in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Street\n\n    \nRecords the street(s) in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nCancel Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the cancel link on the payment page.\n\n  \n\n  \n\n    \nCard Type\n\n    \nThe type of credit or debit card, or `Not Applicable` for the other Payment Types\n\n  \n\n  \n\n    \nCompany Name\n\n    \nRecords the company name that was captured on the payment page.\n\n  \n\n  \n\n    \nDue Date\n\n    \nThe date on which the payment is scheduled for collection.\n\n  \n\n  \n\n    \neCommerce URL\n\n    \nThis is the URL needed to invoke the Asperato paypage is an eCommerce situation.  For example, this can be used to email someone a link by which to make a payment.\n\n  \n\n  \n\n    \nEmail\n\n    \nRecords the email address that was captured on the payment page.\n\n  \n\n  \n\n    \nFail Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the 'Finished' button on the transaction error response screen.\n\n  \n\n  \n\n    \nFirst Name\n\n    \nRecords the first name that was captured on the payment page.\n\n  \n\n  \n\n    \nFrequency\n\n    \nA formula reflecting the payment frequency from the associated subscription if appropriate.\n\n  \n\n  \n\n    \nLast Name\n\n    \nRecords the last name that was captured on the payment page.\n\n  \n\n  \n\n    \nPayment Date\n\n    \nThe date on which the payment is either expected to clear or was cleared.\n\n  \n\n  \n\n    \nPayment Route Options\n\n    \nOne or more of:\n      \n\n        \nCard\n Credit or debit card\n\n        \nDirect Debit\n Direct Debit\n\n        \neCheck\n US Bank payment\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nPayment Route Selected\n\n    \nShows the actual payment route that has been selected.  One of:\n      \n\n        \nCard\n Credit or debit card\n\n        \nDirect Debit\n Direct Debit\n\n        \neCheck\n US Bank payment\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nPayment Schedule\n\n    \nA link to the related Payment Schedule record if appropriate.\n\n  \n\n  \n\n    \nPayment Service Provider Reference\n\n    \nA reference to the payment generated by the payment gateway.\n\n  \n\n  \n\n    \nPayment Service Provider Repeat Token\n\n    \nA formula reflecting the repeat cross reference from the associated authoriisation if appropriate.  Contains the text \"Not set up yet\" if there is no value.\n\n  \n\n  \n\n    \nPayment Stage\n\n    \nThe status of the payment.  Can be one of:\n      \n\n        \nAwaiting submission\n Has been created but is not yet being processed\n\n        \nSubmitted for collection\n Has been set to Asperato for processing.\n\n        \nCollected from customer\n Has been debited from the customer account.\n\n        \nRefunded to customer\n Has been refunded to the customer account.\n\n        \nFailed\n Has failed for some reason\n\n      \n\n    \n\n  \n\n  \n\n    \nPayment Stage Description\n\n    \nA descriptive text showing the reason related to the current payment stage.  Might contain the reason for cancellation or failure for example.\n\n  \n\n  \n\n    \nProcess Date\n\n    \nA formula that calcualtes the date on which a payment is scheduled to be processed.  Takes into account any delay caused by direct debit processing.\n\n  \n\n  \n\n    \nRefunded Payment\n\n    \nA way of cross relating payments, for example where one transaction is a refund of another.\n\n  \n\n  \n\n    \nSource\n\n    \nPayment source.  Can be one of:\n     \n\n      \nWeb\n\n      \nHolder not present\n\n      \nRepeat\n\n     \n\n    \n\n  \n\n  \n\n    \nSuccess Endpoint\n\n    \nThe link or URL that will be executed if the customer presses the 'Finished' button on the transaction success response screen.\n\n  \n\n  \n\n    \nType\n\n    \nOne of:\n      \n\n        \nPayment\n\n        \nRefund\n\n      \n\n    \n\n  \n\n\n\n\n\nInstallation\n\n\nThe core package is installed using a Salesforce package deployment link.  That link will be sent to you when you register with Asperato.  To register please go to this link:\n\nhttps://test.protectedpayments.net/Register\n\n\nWhen installing make sure that the package is accessible by all Salesforce users (this is not the default).\n\nOnce the package has been installed you need to update the system Network Security so that the Asperato servers can communicate with your Salesforce organisation.\nAs a system administrator go to:\n\n\nSetup \n Administer \n Security Controls \n Network Access\n\nAdd the following Trusted IP Ranges:\n\n\n\n\nStart IP Address: 77.68.42.36\n\nEnd IP Address: 77.68.42.36\n\nDescription: Asperato Test\n\n\nStart IP Address: 162.13.56.213\n\nEnd IP Address: 162.13.56.213\n\nDescription: Asperato Live\n\n\n\n\nYou will need to obtain a reference code from Asperato.  This code is known as the \nCustomer ID\n and this needs to be recorded into a Custom Setting object.\nOnce you have obtained the code from Asperato in Salesforce go to\n\n\nSetup \n Build \n Develop \n Custom Settings\n\nIn the list that is displayed you will see \u2018Asperato ONE settings\u2019.\n\nClick on the \u2018Manage\u2019 link.\n\nOn the page that is then displayed press the \u2018Edit\u2019 button\n\nChange the \nCustomer ID\n value to that supplied to you by Asperato and save the record.\n\n\nThere is a regular scheduled task that needs to run each day.  This task will look at the Payment Schedule object and determine whether there are any that are due.  If a Payment Schedule payment is due then this task will create a row in the Payment object for each Payment Schedule.  The task will then look at the Payment object for any rows that are due and will send these as a batch to Asperato for collection.\nTo set up this job go to\n\n\nSetup \n Build \n Develop \n Apex Classes\n\nAt the top of the list that is displayed there is a \u2018Schedule Apex\u2019 button.  Press this button.\n\nA screen will display enabling you to establish the run criteria.\n\nEnter a Job Name - Suggested name is \u2018Asperato Repeat Payment\u2019.\n\nNext to the Apex Class box press the maginfying glass icon and in the list that displays select \u2018BatchProcessSubscriptions\u2019.\n\nSet the Frquency to \u2018Weekly\u2019.\n\nIn the 'Recurs every week on' area tick all the boxes.\n\nSelect a Start date (defaults to today).\n\nSet an End date.  The default is in one month and you should change this to a value a long time in the future such as 31/12/2050.\n\nSet the Preferred Start Time to a value, a suggestion would be 04:00 or 05:00.\n\nSave this record and that will schedule the task.\n\nTo see scheduled jobs go to\n\n\nSetup \n Monitor \n Jobs \n Scheduled Jobs\n\n\nThe Custom Metadata Type settings\n\n\nThere are two Custom Metadata Types that affect the way that the Asperato Phoenix package operates.\n\n\nAsperato Settings\n\n\nThere is a single record in this Metadata Type with the Label of Default.  This record provides reference data for the URLs needed for Asperato.  There is nothing that can be edited in this Metadata Type.\n\n\nService Handlers\n\n\nThere are five records in the Service Handlers Metadata Type and these are used to implement overrides to standard package service handlers.  A service handler is an Apex class that processes the data provided in a web service call and builds the appropriate response.  The full details for each of the web services available and how to create the Apex needed is described in the Web Services section.\n\n\nThe only field you can edit for each record is the Handler Name.  This is the name of the Apex class that will be executed for the relevant handler.  The complete list of the Service Handlers and their default values is shown in the table below.  The Interface Name is the name of the interface that the service handler implements.\n\n\n\n  \n\n    \nLabel\n\n    \nDefault Handler\n\n    \nInterface Name\n\n  \n\n  \n\n    \nGetAuthorisations\n\n    \nGetAuthorisationsService\n\n    \nIGetAuthorisationsService\n\n  \n\n  \n\n    \nGetPayments\n\n    \nGetPaymentsService\n\n    \nIGetPaymentsService\n\n  \n\n  \n\n    \nPutAuthorisations\n\n    \nPutAuthorisationsService\n\n    \nIPutAuthorisationsService\n\n  \n\n  \n\n    \nPutMessages\n\n    \nPutMessagesService\n\n    \nIPutMessagesService\n\n  \n\n  \n\n    \nPutPayments\n\n    \nPutPaymentsService\n\n    \nIPutPaymentsService\n\n  \n\n\n\n\n\nWeb Services\n\n\nEach web service consists of an Apex REST endpoint and an associated Apex class that processes the REST request object and builds the relevant response object.  The Apex class that processes the REST data exchange is called a service handler and the actual name of the service handler is driven by Custom Metadata.\n\n\nSo in simple terms to create a new Apex service handler you create a new Apex class that implements the relevant interface and update the Custom Metadata to point to the new class.  Next time that the web service fires, the service handler that executes would be your code rather than that supplied by the Asperato Phoenix package.\n\n\nThere are three sets of web services relating to payments, authorisations and message updates.\n\n\nPayments\n\n\nThe two web services that relate to payments are labelled \nGetPayments\n and \nPutPayments\n.\n\n\nGetPayments\n\n\nThis gets data from the Payment object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.\n\n\nGetPaymentsRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nRecordID\n\n    \nString (ID)\n\n    \nContains the Salesforce ID to a row in the payment object.\n\n  \n\n  \n\n    \nUrlParameters\n\n    \nList of\nUrlParameter\n\n    \nAny additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list.\n\n  \n\n\n\n\n\nGetPaymentsResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\"\n\n  \n\n  \n\n    \nUseHostedPage\n\n    \nBoolean\n\n    \nWhen true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template.\n\n  \n\n  \n\n    \nDueDate\n\n    \nDate\n\n    \nThe date on which the payment is due.\n\n  \n\n  \n\n    \nAmount\n\n    \nLong\n\n    \nAmount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address city on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address country on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing postal code on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address state/county on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma\n\n  \n\n  \n\n    \nAuthorisationID\n\n    \nString\n\n    \nContains the Salesforce ID of an associated Authorisation if one exists.\n\n  \n\n  \n\n    \nCompanyName\n\n    \nString\n\n    \nThis will be used to provide a default value for the company name on the paypage.\n\n  \n\n  \n\n    \nCurrencyCode\n\n    \nString\n\n    \nThree character ISO 4217 currency code.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThis will be used to provide a default value for the email address on the paypage.\n\n  \n\n  \n\n    \nFirstName\n\n    \nString\n\n    \nThis will be used to provide a default value for the first name on the paypage.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this will contain an indication of why the call failed.\n\n  \n\n  \n\n    \nLastName\n\n    \nString\n\n    \nThis will be used to provide a default value for the last name on the paypage.\n\n  \n\n  \n\n    \nPaymentFrequency\n\n    \nString\n\n    \nOne of:\n      \n\n        \nSingle\n\n        \nDaily\n\n        \nWeekly\n\n        \nMonthly\n\n        \nQuarterly\n\n        \nSemi-annual\n\n        \nAnnual\n\n      \n\n    \n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nDirect Debit\n\n        \neCheck\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nThe Salesforce ID of the payment object row to which the request relates.\n\n  \n\n  \n\n    \nPaymentScheduleID\n\n    \nString\n\n    \nContains the Salesforce ID of an associated Subscription if one exists.\n\n  \n\n  \n\n    \nUrlCancel\n\n    \nString\n\n    \nURL that the payment page will link to if the end customer chooses to cancel the payment process.\n\n  \n\n  \n\n    \nUrlError\n\n    \nString\n\n    \nURL that the result page will go to in the event that the transaction fails\n\n  \n\n  \n\n    \nUrlExit\n\n    \nString\n\n    \nURL that the result page will go to after a successful transaction\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of\nPassThroughParameter\n\n    \nThis is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nThese are the list parameters mentioned above\n\n\nUrlParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter as it appeared in the URL.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter as it appeared in the URL.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe desired content of the parameter to be passed to Asperato.\n\n  \n\n  \n\n    \nIsDisplayOnly\n\n    \nBoolean\n\n    \nWhen true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp04__IGetPaymentsService\n.\n\n\nPutPayments\n\n\nThis puts data back into Salesforce after a payment attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.  In reality this will only happen for the automated (repeat) journey.  To detect this test the first row of the PutPaymentRequestDetails array and examine the value of the Source field.  If this equates to 'Repeat' then you might expect multiple rows otherwise it will be a single element in the PutPaymentRequestDetails array.\n\n\nPutPaymentsRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nPutPaymentRequestDetails\n\n    \nList of\nPutPaymentRequestDetail\n\n    \nA list of outcomes from payment attempts.\n\n  \n\n\n\n\n\nPutPaymentRequestDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted.\n\n  \n\n  \n\n    \nPaymentDate\n\n    \nDate\n\n    \nThe date the payment was attempted.\n\n  \n\n  \n\n    \nAmount\n\n    \nLong\n\n    \nAmount transacted in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThe billing address city as entered on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThe billing address country as selected on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThe billing address postal code as entered on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThe billing address state/county as entered on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThe billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break.\n\n  \n\n  \n\n    \nAccountName\n\n    \nString\n\n    \nThe name on the card or the bank account\n\n  \n\n  \n\n    \nAccountReference\n\n    \nString\n\n    \nAn obscured reference to the card or the bank account.\n\n  \n\n  \n\n    \nAsperatoReference\n\n    \nString\n\n    \nAn Asperato generated order reference for the transaction.\n\n  \n\n  \n\n    \nAsperatoRepeatReference\n\n    \nString\n\n    \nAn Asperato generated order reference for the transaction that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull.\n\n  \n\n  \n\n    \nAuthorisationID\n\n    \nString\n\n    \nContains the Salesforce ID of an associated Authorisation if one exists.  If one was created during the update the ID of that row will be shown here.\n\n  \n\n  \n\n    \nCardType\n\n    \nString\n\n    \nIf a card this will say what type of card was used otherwise will say `Not Applicable`.\n\n  \n\n  \n\n    \nCompanyName\n\n    \nString\n\n    \nThe company name as entered on the paypage.\n\n  \n\n  \n\n    \nCurrencyCode\n\n    \nString\n\n    \nThree character ISO 4217 currency code.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThe email address as entered on the paypage.\n\n  \n\n  \n\n    \nFirstName\n\n    \nString\n\n    \nThe first name as entered on the paypage.\n\n  \n\n  \n\n    \nLastName\n\n    \nString\n\n    \nThe last name as entered on the paypage.\n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nDirect Debit\n\n        \neCheck\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nPaymentScheduleID\n\n    \nString\n\n    \nContains the Salesforce ID of an associated Subscription if one exists.\n\n  \n\n  \n\n    \nPSPReference\n\n    \nString\n\n    \nThe cross reference value obtained from the payment gateway.\n\n  \n\n  \n\n    \nPSPRepeatToken\n\n    \nString\n\n    \nThe cross reference value obtained from the payment gateway that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull.\n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nID of the payment object row\n\n  \n\n  \n\n    \nSource\n\n    \nString\n\n    \nHow the transaction was generated.  One of:\n      \n\n        \nHolder not present\n\n        \nRepeat\n\n        \nWeb\n\n      \n\n    \n\n  \n\n  \n\n    \nStatusDescription\n\n    \nString\n\n    \nText relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate.\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of\nPassThroughParameter\n\n    \nThis is a list of name value pairs that were passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter passed from Asperato.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter passed from Asperato.\n\n  \n\n\n\n\n\nPutPaymentsResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the overall request was successful.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nPutPaymentResponseDetails\n\n    \nList of \nPutPaymentResponseDetail\n\n    \n\n  \n\n\n\n\n\nPutPaymentResponseDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the request was successful for this row.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nThe ID of the row that was updated.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp04__IPutPaymentsService\n.\n\n\nAuthorisations\n\n\nThe two web services that relate to authorisations are labelled \nGetAuthorisations\n and \nPutAuthorisations\n.\n\n\nGetAuthorisations\n\n\nThis gets data from the Authorisation object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.\n\n\nGetAuthorisationsRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nRecordID\n\n    \nString (ID)\n\n    \nContains the Salesforce ID to a row in the payment object.\n\n  \n\n  \n\n    \nUrlParameters\n\n    \nList of\nUrlParameter\n\n    \nAny additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list.\n\n  \n\n\n\n\n\nGetAuthorisationsResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nCPAGranted\n\n    \nBoolean\n\n    \nThe existing value of the CPAGranted field in the Authorisation record.\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\"\n\n  \n\n  \n\n    \nUseHostedPage\n\n    \nBoolean\n\n    \nWhen true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template.\n\n  \n\n  \n\n    \nAuthorisationAmount\n\n    \nLong\n\n    \nAuthorisation Amount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address city on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address country on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing postal code on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address state/county on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma\n\n  \n\n  \n\n    \nCompanyName\n\n    \nString\n\n    \nThis will be used to provide a default value for the company name on the paypage.\n\n  \n\n  \n\n    \nCurrencyCode\n\n    \nString\n\n    \nThree character ISO 4217 currency code.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThis will be used to provide a default value for the email address on the paypage.\n\n  \n\n  \n\n    \nFirstName\n\n    \nString\n\n    \nThis will be used to provide a default value for the first name on the paypage.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this will contain an indication of why the call failed.\n\n  \n\n  \n\n    \nLastName\n\n    \nString\n\n    \nThis will be used to provide a default value for the last name on the paypage.\n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nDirect Debit\n\n        \neCheck\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nUrlCancel\n\n    \nString\n\n    \nURL that the payment page will link to if the end customer chooses to cancel the payment process.\n\n  \n\n  \n\n    \nUrlError\n\n    \nString\n\n    \nURL that the result page will go to in the event that the transaction fails\n\n  \n\n  \n\n    \nUrlExit\n\n    \nString\n\n    \nURL that the result page will go to after a successful transaction\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of\nPassThroughParameter\n\n    \nThis is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nThese are the list parameters mentioned above\n\n\nUrlParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter as it appeared in the URL.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter as it appeared in the URL.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe desired content of the parameter to be passed to Asperato.\n\n  \n\n  \n\n    \nIsDisplayOnly\n\n    \nBoolean\n\n    \nWhen true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp04__IGetPaymentsService\n.\n\n\nPutAuthorisations\n\n\nThis puts data back into Salesforce after a authorisation attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.  In reality this will only happen for the automated (repeat) journey.  To detect this test the first row of the PutAuthorisationRequestDetails array and examine the value of the Source field.  If this equates to 'Repeat' then you might expect multiple rows otherwise it will be a single element in the PutAuthorisationRequestDetails array.\n\n\nPutAuthorisationsRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nPutAuthorisationRequestDetails\n\n    \nList of PutAuthorisationRequestDetail\n\n    \nA list of outcomes from authorisation attempts.\n\n  \n\n\n\n\n\nPutAuthorisationRequestDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nCPAGranted\n\n    \nBoolean\n\n    \nWhen true means that the request that a continuous payment authorisation was granted by the payer.\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted.\n\n  \n\n  \n\n    \nEffectiveDate\n\n    \nDate\n\n    \nThe date the authorisation will become effective.  This is used to establish the point at which a repeating payment cycle will start.  An example of this would be where an authorisation is set up now for a monthly repeating payment where the first payment happens in two weeks time.\n\n  \n\n  \n\n    \nExpiryDate\n\n    \nDate\n\n    \nThe date the authorisation will expire if that applies.  This could be the card expiry date for example.\n\n  \n\n  \n\n    \nRegularAmount\n\n    \nLong\n\n    \nAmount that will be processed as part of a repeating payment in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThe billing address city as entered on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThe billing address country as selected on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThe billing address postal code as entered on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThe billing address state/county as entered on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThe billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break.\n\n  \n\n  \n\n    \nAccountName\n\n    \nString\n\n    \nThe name on the card or the bank account\n\n  \n\n  \n\n    \nAccountReference\n\n    \nString\n\n    \nAn obscured reference to the card or the bank account.\n\n  \n\n  \n\n    \nAsperatoRepeatReference\n\n    \nString\n\n    \nAn Asperato generated order reference for the transaction that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull.\n\n  \n\n  \n\n    \nCardType\n\n    \nString\n\n    \nIf a card this will say what type of card was used otherwise will say `Not Applicable`.\n\n  \n\n  \n\n    \nCompanyName\n\n    \nString\n\n    \nThe company name as entered on the paypage.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThe email address as entered on the paypage.\n\n  \n\n  \n\n    \nFirstName\n\n    \nString\n\n    \nThe first name as entered on the paypage.\n\n  \n\n  \n\n    \nLastName\n\n    \nString\n\n    \nThe last name as entered on the paypage.\n\n  \n\n  \n\n    \nMandateReference\n\n    \nString\n\n    \nThe mandate reference that should appear on any documentation sent to the payer (if applicable).\n\n  \n\n  \n\n    \nPaymentFrequency\n\n    \nString\n\n    \nThe frequency that applies to a regular payment.  Will be one of:\n      \n\n        \nSingle\n\n        \nDaily\n\n        \nWeekly\n\n        \nMonthly\n\n        \nQuarterly\n\n        \nSemi-annual\n\n        \nAnnual\n\n      \n\n    \n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nDirect Debit\n\n        \neCheck\n\n        \nPayPal\n\n      \n\n    \n\n  \n\n  \n\n    \nPSPRepeatToken\n\n    \nString\n\n    \nThe cross reference value obtained from the payment gateway that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull.\n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nID of the authorisation object row\n\n  \n\n  \n\n    \nSource\n\n    \nString\n\n    \nHow the transaction was generated.  One of:\n      \n\n        \nHolder not present\n\n        \nRepeat\n\n        \nWeb\n\n      \n\n    \n\n  \n\n  \n\n    \nStatusDescription\n\n    \nString\n\n    \nText relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate.\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of PassThroughParameter\n\n    \nThis is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter passed from Asperato.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter passed from Asperato.\n\n  \n\n\n\n\n\nPutAuthorisationsResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the overall request was successful.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nPutAuthorisationResponseDetails\n\n    \nList of PutAuthorisationResponseDetail\n\n    \n\n  \n\n\n\n\n\nPutAuthorisationResponseDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the request was successful for this row.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nThe ID of the row that was updated or created.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp04__IPutAuthorisationsService\n.\n\n\nMessages\n\n\nThe message web service is used to send messages from Asperato to Salesforce.  These messages affect the status of existing payments or authorisations.\n\n\nAt the moment these messages all relate to UK Direct Debits, though in future this will include SEPA direct debits and card updates.\n\n\nThis web service can be bulked up so is capable of sending multiple rows in a single request.\n\n\nPutMessagesRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nPutMessagesRequest\n\n    \nList of\nPutMessageRequestDetail\n\n    \nA list of messages.\n\n  \n\n\n\n\n\nPutMessageRequestDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means the message has a positive implication, when false indicates a failure of some sort.\n\n  \n\n  \n\n    \nAction\n\n    \nString\n\n    \nThe action that the message implies.  Typical values are created, active, cancelled, failed, etc.\n\n  \n\n  \n\n    \nEventReference\n\n    \nString\n\n    \nA unique reference to the message.\n\n  \n\n  \n\n    \nMessageText\n\n    \nString\n\n    \nTextural content of the message truncated to 250 characters so as not cause insert failures in the standard objects.\n\n  \n\n  \n\n    \nReasonCode\n\n    \nString\n\n    \nThe raw reason code from either BACS or SEPA\n\n  \n\n  \n\n    \nResource\n\n    \nString\n\n    \nCan be one of \n      \n\n        \nmandates\n\n        \npayments\n\n        \nrefunds\n\n        \nPayouts\n (not currently sent)\n\n        \nsubscriptions\n (not currently sent)\n\n      \n\n    \n\n  \n\n  \n\n    \nTransactionReference\n\n    \nString\n\n    \nA reference needed to locate the item to which the message refers (see below)\n\n  \n\n\n\n\n\nLocating the data to which a message refers.\n\n\nWhen the resource has the text content \nmandates\n the message relates to an Authorisation.  To locate the correct row search for where the Payment Service Provider Repeat Token on the Authorisation row equals the TransactionReference on the request.\n\n\nWhen the resource has the text content of either \npayments\n or \nrefunds\n then the message relates to the Payment object.\n\n\nTo locate the correct row search for where the Payment Service Provider Reference on the Payment row equals the TransactionReference on the request.\n\n\nPutMessagesResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the overall request was successful.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp04__IPutMessagesService\n.\n\n\nUtilities\n\n\nThere are a number of utility functions in the core Asperato ONE package that are available for use for designers and code builds that choose to extend the package.\n\n\nConstants\n\n\nThere is a utility class that contains the constant code values used throughout the Asperato ONE package.  It is recommended that you use these constants rather than the raw codes because that will make any customisations forward compatible.\n\n\nTo use a value from the Contants class simply refer to it.  For example to set the Authorisation Status to the value of 'In Force' then refer the to constant value \nasp04.Constants.AUTHORISATION_STATUS_IN_FORCE\n.\n\n\nAuthorisation Status\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nAUTHORISATION_STATUS_CANCELLED\n\n    \nCancelled\n\n  \n\n  \n\n    \nAUTHORISATION_STATUS_FAILED\n\n    \nFailed\n\n  \n\n  \n\n    \nAUTHORISATION_STATUS_IN_FORCE\n\n    \nIn Force\n\n  \n\n  \n\n    \nAUTHORISATION_STATUS_PENDING\n\n    \nPending\n\n  \n\n\n\n\nPayment Route\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_TYPE_CARD\n\n    \nCard\n\n  \n\n  \n\n    \nPAYMENT_TYPE_DIRECT_DEBIT\n\n    \nDirectDebit\n\n  \n\n  \n\n    \nPAYMENT_TYPE_ECHECK\n\n    \nEcheck\n\n  \n\n  \n\n    \nPAYMENT_TYPE_WALLET\n\n    \nPayPal\n\n  \n\n\n\n\nPayment Source\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_SOURCE_HOLDER_NOT_PRESENT\n\n    \nHolder not present\n\n  \n\n  \n\n    \nPAYMENT_SOURCE_REPEAT\n\n    \nRepeat\n\n  \n\n  \n\n    \nPAYMENT_SOURCE_WEB\n\n    \nWeb\n\n  \n\n\n\n\nPayment Status\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_STATUS_PENDING\n\n    \nSubmitted for collection\n\n  \n\n  \n\n    \nPAYMENT_STATUS_PAID\n\n    \nCollected from customer\n\n  \n\n  \n\n    \nPAYMENT_STATUS_REFUNDED\n\n    \nRefunded to customer\n\n  \n\n  \n\n    \nPAYMENT_STATUS_FAILED\n\n    \nFailed\n\n  \n\n  \n\n    \nPAYMENT_STATUS_PAYMENT_SCHEDULED\n\n    \nAwaiting submission\n\n  \n\n\n\n\nPayment Type\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_TYPE_PAYMENT\n\n    \nPayment\n\n  \n\n  \n\n    \nPAYMENT_TYPE_REFUND\n\n    \nRefund\n\n  \n\n\n\n\nPayment Schedule Frequency\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_SINGLE\n\n    \nSingle\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_DAILY\n\n    \nDaily\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_WEEKLY\n\n    \nWeekly\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_MONTHLY\n\n    \nMonthly\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_QUARTERLY\n\n    \nQuarterly\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_BIANNUALLY\n\n    \nSemi-annual\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_FREQUENCY_ANNUALLY\n\n    \nAnnual\n\n  \n\n\n\n\nPayment Schedule Frequency\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_STATUS_ACTIVE\n\n    \nActive\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_STATUS_EXPIRED\n\n    \nExpired\n\n  \n\n  \n\n    \nPAYMENT_SCHEDULE_STATUS_INACTIVE\n\n    \nInactive\n\n  \n\n\n\n\nMessages Resource\n\n\n\n  \n\n    \nField Name\n\n    \nCode Value\n\n  \n\n  \n\n    \nMESSAGE_MANDATES\n\n    \nmandates\n\n  \n\n  \n\n    \nMESSAGE_PAYMENTS\n\n    \npayments\n\n  \n\n  \n\n    \nMESSAGE_REFUNDS\n\n    \nrefunds\n\n  \n\n\n\n\nResolve the payment route from text to a code\n\n\nAsperato uses four character codes to represent the type of transaction that is to take place.  This appears in the repeat payment process.  There is a utility function available that will resolve the text to a code.\n\n\nCustomisation\n\n\nThe standard package service handlers can be overlayed with custom versions if that is desired.\n\n\nThe custom class has to implement its appropriate interface and then have code to action that interface methods.  This is a simple example of an class that overrides the handler for the PutPayments web service.\n\n\npublic with sharing class MyOverridePutPaymentsServiceHandler implements asp04.IPutPaymentsService\n{\n    public asp04.PutPaymentsService.PutPaymentsResponse PutPayments(asp04.PutPaymentsService.PutPaymentsRequest request)\n    {\n        asp04.PutPaymentsService.PutPaymentsResponse response = new asp04.PutPaymentsService.PutPaymentsResponse();\n\n        // the real code goes here\n\n        return response;\n    }\n}", 
            "title": "Asperato ONE"
        }, 
        {
            "location": "/sf/#asperato-one-salesforce-package", 
            "text": "The core package consists of three custom objects and a set of web services that communicate between Asperato and Salesforce.  The web services are all managed through Apex classes.  The package is designed to be extensible so that the package web service classes can be replaced by custom Apex code if that is required.    There are simple VisualForce pages to support each of the data objects and tabs accessing these are grouped together into an Asperato application.  The configuration of the package is managed via Custom Metadata.  There are two Metadata Types, Asperato Settings and Service Handler.  The options available for these settings are described below.  Note that this package is available for: Lightning Enterprise   Lightning Unlimited only.  For further information please see  https://www.salesforce.com/uk/editions-pricing/sales-cloud/", 
            "title": "Asperato ONE Salesforce package"
        }, 
        {
            "location": "/sf/#design-overview", 
            "text": "", 
            "title": "Design overview"
        }, 
        {
            "location": "/sf/#the-web-journey", 
            "text": "The web journey is where a payment or an authorisation is set up via screens that require interaction from a paying person.  This is typically through links in a website, links sent in email communications or direct from Salesforce via a button or a link.  The journey starts with a URL that invokes an Asperato program.  The URL will contain at least one parameter ( pmRef ) and might have several more.  This are described more fully elsewhere.  The parameters are used to: \n  * Obtain configuration from Asperato using the  pmRef  parameter. \n  * Obtain data from Salesforce using either the GetAuthorisations REST webservice or the GetPayments REST webservice.  The requests and responses for these services are described fully elsewhere in this documentation.  The Asperato program combines the configuration and the data to create a dynamic web screen that is then displayed to the person making the payment in a web browser. \nThe payer then enters data to the web screen and control then passes to another Asperato program. \nThis second program accepts and validates the data input and then calls the relevant payment gateway. \nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments. \nAsperato then displays the outcome of the whole transaction on either a success or a fail screen.", 
            "title": "The web journey"
        }, 
        {
            "location": "/sf/#the-automatic-repeat-payment-journey", 
            "text": "The automatic payment journey is the process by which a payment can be taken without the need for screen input on behalf of the payer based on an authorisation that has already been put in place.  This authorisation is typically a Direct Debit mandate or a card continuous payment authority.  The journey starts in Salesforce where suitable code creates a list of payments that are due for collection.   \nThis list of payments is then sent to Asperato using a REST web service. \nAsperato then applies validation to each line in the list and either accepts or rejects the individual request line. \nFor those lines that are accepted Asperato calls the relevant gateway.  \nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.", 
            "title": "The automatic (repeat) payment journey"
        }, 
        {
            "location": "/sf/#terminology", 
            "text": "In Asperato terms an Authorisation is a record of an authority given by a payer to collect automatic payments.  This will take the physical form of either a Direct Debit mandate or a card Continuous Payment Authorisation (CPA).  Creating an authority does not take money from the associated account, it merely sets up the mechanism to allow that to happen in the future.  There are rules in force about what you have to tell the payer when you set up an authority and when you take payments using it.  Those rules vary depending on the payment route you are using.  A Payment is a financial transaction.  This can include a refund. Its key attributes are that is has an amount, currency, a due date and a payment route.  In Asperato terms an Automatic or Repeat payment is defined as where: \nThe payment frequency is not \u2018Single\u2019. \nThe payment frequency is \u2018Single\u2019 but the payment due date is in the future. \nThe payment route is either BACS or SEPA since these require authorisations even for one off payments", 
            "title": "Terminology"
        }, 
        {
            "location": "/sf/#payment-scenarios", 
            "text": "Basic actions on the data in Salesforce: \n(a) Create new  Authorisation  row \n(b) Update existing  Authorisation  row \n(c) Create a new  Paymen t row \n(d) Update an existing  Payment  row  These are the data scenarios that the package is designed to deal with: \n   \n     Scenario \n     Action \n   \n   \n     New authority where no data currently exists \n     (a) \n   \n   \n     New authority where an  Authorisation  row already exists \n     (b) \n   \n   \n     Update to an existing authority \n     (b) \n   \n   \n     Single payment where no data currently exists \n     (c) \n   \n   \n     Single payment where a  Payment  row already exists \n     (d) \n   \n   \n     Repeat payment where where no data currently exists on either  Authorisation  or  Payment \n     (a) + (c) \n   \n   \n     Repeat payment where where no data currently exists on  Payment  but an  Authorisation  row exists \n     (b) + (c) \n   \n   \n     Repeat payment where where data exists on  Payment  but no related  Authorisation  row exists \n     (a) + (d) \n   \n   \n     Repeat payment where where rows exist on both  Authorisation  and  Payment \n     (b) + (d) \n   \n   \n     Subsequent repeat payment (i.e. an automatic payment) \n     (b) + (d)", 
            "title": "Payment scenarios"
        }, 
        {
            "location": "/sf/#the-data-objects", 
            "text": "The package data objects are called  Payment ,  Subscription  and  Authorisation  and they are related to each other as per the diagram below.", 
            "title": "The data objects"
        }, 
        {
            "location": "/sf/#authorisation", 
            "text": "Authorisation contains data relating to an authority to collect payments.  This can take the form of either a Direct Debit mandate or a card continuous payment authority.  The fields and their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Account Name \n     Records the name on the bank account or the cardholder name for future reference. \n   \n   \n     Account Reference \n     A partially obscured record of the bank account or credit card number for future reference. \n   \n   \n     Asperato Repeat Token \n     One of a pair of fields needed to make a repeat payment request. \n   \n   \n     Billing Address City \n     Records the city in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Country \n     Records the country in the billing address that was captured on the payment page. \n   \n   \n     Billing Address PostalCode \n     Records the postal code in the billing address that was captured on the payment page. \n   \n   \n     Billing Address State \n     Records the state/county in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Street \n     Records the street(s) in the billing address that was captured on the payment page. \n   \n   \n     Cancel Endpoint \n     The link or URL that will be executed if the customer presses the cancel link on the payment page. \n   \n   \n     Card Type \n     The type of credit or debit card, or `Not Applicable` for the other Authorisation Types. \n   \n   \n     Company Name \n     Records the company name that was captured on the payment page. \n   \n   \n     CPA Granted \n     Indicates that the customer has given permission for card details to be used to collect automatic payments. \n   \n   \n     Direct Debit Error Code \n     In the event that the BACS system passes back an error response this will contain the raw BACS error code. \n   \n   \n     eCommerce URL \n     This is the URL needed to invoke the Asperato paypage is an eCommerce situation.  For example, this can be used to email someone a link by which to make a payment. \n   \n   \n     Email \n     Records the email address that was captured on the payment page. \n   \n   \n     Expiry Date \n     The date on the which the authorisation will expire (if applicable). \n   \n   \n     Fail Endpoint \n     The link or URL that will be executed if the customer presses the 'Finished' button on the transaction error response screen. \n   \n   \n     First Name \n     Records the first name that was captured on the payment page. \n   \n   \n     Last Name \n     Records the last name that was captured on the payment page. \n   \n   \n     Mandate Reference \n     The reference for a Direct Debit mandate that will need to be displayed to the end customer in emails and other communication. \n   \n   \n     Payment Route Options \n     One or more of of:\n       \n         Card  Credit or debit card \n         Direct Debit  Direct Debit \n         eCheck    US Bank payment \n         PayPal \n       \n     \n   \n   \n     Payment Service Provider Repeat Token \n     One of a pair of fields needed to make a repeat payment request. \n   \n   \n     Status \n     The status of the authorisation.  Can be one of:\n       \n         Pending  Has been created but is not yet active \n         In Force  In force and ready to use \n         Cancelled  Has been stopped \n         Failed  Has failed for some reason \n       \n     \n   \n   \n     Status Description \n     A descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example. \n   \n   \n     Success Endpoint \n     The link or URL that will be executed if the customer presses the 'Finished' button on the transaction success response screen.", 
            "title": "Authorisation"
        }, 
        {
            "location": "/sf/#payment-schedule", 
            "text": "Payment Schedule contains the information needed to drive the creation of payments where they need to recur automatically.  Payment Schedule has a lookup relationship with Authorisation.  The fields are their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Authorisation \n     A link to the related Authorisation object.  A subscription must have and entry here in order to process a payment. \n   \n   \n     Authorisation Status \n     A formula reflecting the status of the associated Authorisation. \n   \n   \n     Final Payment Date \n     After this date no more payments will be taken from this payment schedule \n   \n   \n     Frequency \n     The payment frequency for the subscription. One of:\n       \n         Single \n         Daily \n         Weekly \n         Monthly \n         Quarterly \n         Semi-annual \n         Annual \n       \n     \n   \n   \n     Last Payment Date \n     The date on which the last payment schedule payment request was raised. \n   \n   \n     Next Payment Date \n     The date on which the next payment request will be raised. \n   \n   \n     Next Process Date \n     A formula that calculates the next date on which a payment request should be processed.  This takes into account ant delay caused by Direct Debit processing \n   \n   \n     Payment Route Selected \n     A formula reflecting the selected payment route of the associated Authorisation. \n   \n   \n     Regular Amount \n     The amount of the subscription charge.  The currency will be determined based on the currency of the Subscription record in a multi-currency org or from the org default currency for a single currency org. \n   \n   \n     Status \n     The status of the subscription.  Can be one of:\n       \n         Active  In force and ready to use \n         Inactive  Has been stopped \n         Expired  Has been stopped because the Final Payment Date has been reached", 
            "title": "Payment Schedule"
        }, 
        {
            "location": "/sf/#payment", 
            "text": "Payment contains both the request for a payment to occur and also the response once it has been processed.  Payment has a lookup relationship to both Authorisation and Subscription.  The fields are their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Account Name \n     Records the name on the bank account or the cardholder name for future reference. \n   \n   \n     Account Reference \n     A partially obscured record of the bank account or credit card number for future reference. \n   \n   \n     Amount \n     The amount of the payment.  Will contain either the requested amount of the amount actually collected depending on the status of the payment. \n   \n   \n     Asperato Reference \n     A unique reference to the payment transaction generated by Asperato and reflected through to the payment gateway. \n   \n   \n     Asperato Repeat Token \n     A formula reflecting the Asperato Repeat Token from the associated authoriisation if appropriate.  Contains the text \"Not set up yet\" if there is no value. \n   \n   \n     Authorisation \n     A link to the related Authorisation object if appropriate. \n   \n   \n     Billing Address City \n     Records the city in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Country \n     Records the country in the billing address that was captured on the payment page. \n   \n   \n     Billing Address PostalCode \n     Records the postal code in the billing address that was captured on the payment page. \n   \n   \n     Billing Address State \n     Records the state/county in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Street \n     Records the street(s) in the billing address that was captured on the payment page. \n   \n   \n     Cancel Endpoint \n     The link or URL that will be executed if the customer presses the cancel link on the payment page. \n   \n   \n     Card Type \n     The type of credit or debit card, or `Not Applicable` for the other Payment Types \n   \n   \n     Company Name \n     Records the company name that was captured on the payment page. \n   \n   \n     Due Date \n     The date on which the payment is scheduled for collection. \n   \n   \n     eCommerce URL \n     This is the URL needed to invoke the Asperato paypage is an eCommerce situation.  For example, this can be used to email someone a link by which to make a payment. \n   \n   \n     Email \n     Records the email address that was captured on the payment page. \n   \n   \n     Fail Endpoint \n     The link or URL that will be executed if the customer presses the 'Finished' button on the transaction error response screen. \n   \n   \n     First Name \n     Records the first name that was captured on the payment page. \n   \n   \n     Frequency \n     A formula reflecting the payment frequency from the associated subscription if appropriate. \n   \n   \n     Last Name \n     Records the last name that was captured on the payment page. \n   \n   \n     Payment Date \n     The date on which the payment is either expected to clear or was cleared. \n   \n   \n     Payment Route Options \n     One or more of:\n       \n         Card  Credit or debit card \n         Direct Debit  Direct Debit \n         eCheck  US Bank payment \n         PayPal \n       \n     \n   \n   \n     Payment Route Selected \n     Shows the actual payment route that has been selected.  One of:\n       \n         Card  Credit or debit card \n         Direct Debit  Direct Debit \n         eCheck  US Bank payment \n         PayPal \n       \n     \n   \n   \n     Payment Schedule \n     A link to the related Payment Schedule record if appropriate. \n   \n   \n     Payment Service Provider Reference \n     A reference to the payment generated by the payment gateway. \n   \n   \n     Payment Service Provider Repeat Token \n     A formula reflecting the repeat cross reference from the associated authoriisation if appropriate.  Contains the text \"Not set up yet\" if there is no value. \n   \n   \n     Payment Stage \n     The status of the payment.  Can be one of:\n       \n         Awaiting submission  Has been created but is not yet being processed \n         Submitted for collection  Has been set to Asperato for processing. \n         Collected from customer  Has been debited from the customer account. \n         Refunded to customer  Has been refunded to the customer account. \n         Failed  Has failed for some reason \n       \n     \n   \n   \n     Payment Stage Description \n     A descriptive text showing the reason related to the current payment stage.  Might contain the reason for cancellation or failure for example. \n   \n   \n     Process Date \n     A formula that calcualtes the date on which a payment is scheduled to be processed.  Takes into account any delay caused by direct debit processing. \n   \n   \n     Refunded Payment \n     A way of cross relating payments, for example where one transaction is a refund of another. \n   \n   \n     Source \n     Payment source.  Can be one of:\n      \n       Web \n       Holder not present \n       Repeat \n      \n     \n   \n   \n     Success Endpoint \n     The link or URL that will be executed if the customer presses the 'Finished' button on the transaction success response screen. \n   \n   \n     Type \n     One of:\n       \n         Payment \n         Refund", 
            "title": "Payment"
        }, 
        {
            "location": "/sf/#installation", 
            "text": "The core package is installed using a Salesforce package deployment link.  That link will be sent to you when you register with Asperato.  To register please go to this link: https://test.protectedpayments.net/Register  When installing make sure that the package is accessible by all Salesforce users (this is not the default). \nOnce the package has been installed you need to update the system Network Security so that the Asperato servers can communicate with your Salesforce organisation.\nAs a system administrator go to:  Setup   Administer   Security Controls   Network Access \nAdd the following Trusted IP Ranges:   Start IP Address: 77.68.42.36 \nEnd IP Address: 77.68.42.36 \nDescription: Asperato Test  Start IP Address: 162.13.56.213 \nEnd IP Address: 162.13.56.213 \nDescription: Asperato Live   You will need to obtain a reference code from Asperato.  This code is known as the  Customer ID  and this needs to be recorded into a Custom Setting object.\nOnce you have obtained the code from Asperato in Salesforce go to  Setup   Build   Develop   Custom Settings \nIn the list that is displayed you will see \u2018Asperato ONE settings\u2019. \nClick on the \u2018Manage\u2019 link. \nOn the page that is then displayed press the \u2018Edit\u2019 button \nChange the  Customer ID  value to that supplied to you by Asperato and save the record.  There is a regular scheduled task that needs to run each day.  This task will look at the Payment Schedule object and determine whether there are any that are due.  If a Payment Schedule payment is due then this task will create a row in the Payment object for each Payment Schedule.  The task will then look at the Payment object for any rows that are due and will send these as a batch to Asperato for collection.\nTo set up this job go to  Setup   Build   Develop   Apex Classes \nAt the top of the list that is displayed there is a \u2018Schedule Apex\u2019 button.  Press this button. \nA screen will display enabling you to establish the run criteria. \nEnter a Job Name - Suggested name is \u2018Asperato Repeat Payment\u2019. \nNext to the Apex Class box press the maginfying glass icon and in the list that displays select \u2018BatchProcessSubscriptions\u2019. \nSet the Frquency to \u2018Weekly\u2019. \nIn the 'Recurs every week on' area tick all the boxes. \nSelect a Start date (defaults to today). \nSet an End date.  The default is in one month and you should change this to a value a long time in the future such as 31/12/2050. \nSet the Preferred Start Time to a value, a suggestion would be 04:00 or 05:00. \nSave this record and that will schedule the task. \nTo see scheduled jobs go to  Setup   Monitor   Jobs   Scheduled Jobs", 
            "title": "Installation"
        }, 
        {
            "location": "/sf/#the-custom-metadata-type-settings", 
            "text": "There are two Custom Metadata Types that affect the way that the Asperato Phoenix package operates.", 
            "title": "The Custom Metadata Type settings"
        }, 
        {
            "location": "/sf/#asperato-settings", 
            "text": "There is a single record in this Metadata Type with the Label of Default.  This record provides reference data for the URLs needed for Asperato.  There is nothing that can be edited in this Metadata Type.", 
            "title": "Asperato Settings"
        }, 
        {
            "location": "/sf/#service-handlers", 
            "text": "There are five records in the Service Handlers Metadata Type and these are used to implement overrides to standard package service handlers.  A service handler is an Apex class that processes the data provided in a web service call and builds the appropriate response.  The full details for each of the web services available and how to create the Apex needed is described in the Web Services section.  The only field you can edit for each record is the Handler Name.  This is the name of the Apex class that will be executed for the relevant handler.  The complete list of the Service Handlers and their default values is shown in the table below.  The Interface Name is the name of the interface that the service handler implements.  \n   \n     Label \n     Default Handler \n     Interface Name \n   \n   \n     GetAuthorisations \n     GetAuthorisationsService \n     IGetAuthorisationsService \n   \n   \n     GetPayments \n     GetPaymentsService \n     IGetPaymentsService \n   \n   \n     PutAuthorisations \n     PutAuthorisationsService \n     IPutAuthorisationsService \n   \n   \n     PutMessages \n     PutMessagesService \n     IPutMessagesService \n   \n   \n     PutPayments \n     PutPaymentsService \n     IPutPaymentsService", 
            "title": "Service Handlers"
        }, 
        {
            "location": "/sf/#web-services", 
            "text": "Each web service consists of an Apex REST endpoint and an associated Apex class that processes the REST request object and builds the relevant response object.  The Apex class that processes the REST data exchange is called a service handler and the actual name of the service handler is driven by Custom Metadata.  So in simple terms to create a new Apex service handler you create a new Apex class that implements the relevant interface and update the Custom Metadata to point to the new class.  Next time that the web service fires, the service handler that executes would be your code rather than that supplied by the Asperato Phoenix package.  There are three sets of web services relating to payments, authorisations and message updates.", 
            "title": "Web Services"
        }, 
        {
            "location": "/sf/#payments", 
            "text": "The two web services that relate to payments are labelled  GetPayments  and  PutPayments .", 
            "title": "Payments"
        }, 
        {
            "location": "/sf/#getpayments", 
            "text": "This gets data from the Payment object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.  GetPaymentsRequest  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     RecordID \n     String (ID) \n     Contains the Salesforce ID to a row in the payment object. \n   \n   \n     UrlParameters \n     List of\nUrlParameter \n     Any additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list. \n     GetPaymentsResponse  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\" \n   \n   \n     UseHostedPage \n     Boolean \n     When true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template. \n   \n   \n     DueDate \n     Date \n     The date on which the payment is due. \n   \n   \n     Amount \n     Long \n     Amount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     This will be used to provide a default value for the billing address city on the paypage. \n   \n   \n     AddressCountry \n     String \n     This will be used to provide a default value for the billing address country on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     This will be used to provide a default value for the billing postal code on the paypage. \n   \n   \n     AddressState \n     String \n     This will be used to provide a default value for the billing address state/county on the paypage. \n   \n   \n     AddressStreet \n     String \n     This will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma \n   \n   \n     AuthorisationID \n     String \n     Contains the Salesforce ID of an associated Authorisation if one exists. \n   \n   \n     CompanyName \n     String \n     This will be used to provide a default value for the company name on the paypage. \n   \n   \n     CurrencyCode \n     String \n     Three character ISO 4217 currency code. \n   \n   \n     Email \n     String \n     This will be used to provide a default value for the email address on the paypage. \n   \n   \n     FirstName \n     String \n     This will be used to provide a default value for the first name on the paypage. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this will contain an indication of why the call failed. \n   \n   \n     LastName \n     String \n     This will be used to provide a default value for the last name on the paypage. \n   \n   \n     PaymentFrequency \n     String \n     One of:\n       \n         Single \n         Daily \n         Weekly \n         Monthly \n         Quarterly \n         Semi-annual \n         Annual \n       \n     \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         Direct Debit \n         eCheck \n         PayPal \n       \n     \n   \n   \n     SalesforceId \n     String \n     The Salesforce ID of the payment object row to which the request relates. \n   \n   \n     PaymentScheduleID \n     String \n     Contains the Salesforce ID of an associated Subscription if one exists. \n   \n   \n     UrlCancel \n     String \n     URL that the payment page will link to if the end customer chooses to cancel the payment process. \n   \n   \n     UrlError \n     String \n     URL that the result page will go to in the event that the transaction fails \n   \n   \n     UrlExit \n     String \n     URL that the result page will go to after a successful transaction \n   \n   \n     PassThroughParameters \n     List of\nPassThroughParameter \n     This is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     These are the list parameters mentioned above  UrlParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter as it appeared in the URL. \n   \n   \n     Value \n     String \n     The content of the parameter as it appeared in the URL. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter. \n   \n   \n     Value \n     String \n     The desired content of the parameter to be passed to Asperato. \n   \n   \n     IsDisplayOnly \n     Boolean \n     When true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again. \n     When implementing a service handler override class this new class should implement the interface called  asp04__IGetPaymentsService .", 
            "title": "GetPayments"
        }, 
        {
            "location": "/sf/#putpayments", 
            "text": "This puts data back into Salesforce after a payment attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.  In reality this will only happen for the automated (repeat) journey.  To detect this test the first row of the PutPaymentRequestDetails array and examine the value of the Source field.  If this equates to 'Repeat' then you might expect multiple rows otherwise it will be a single element in the PutPaymentRequestDetails array.  PutPaymentsRequest  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     PutPaymentRequestDetails \n     List of\nPutPaymentRequestDetail \n     A list of outcomes from payment attempts. \n     PutPaymentRequestDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted. \n   \n   \n     PaymentDate \n     Date \n     The date the payment was attempted. \n   \n   \n     Amount \n     Long \n     Amount transacted in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     The billing address city as entered on the paypage. \n   \n   \n     AddressCountry \n     String \n     The billing address country as selected on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     The billing address postal code as entered on the paypage. \n   \n   \n     AddressState \n     String \n     The billing address state/county as entered on the paypage. \n   \n   \n     AddressStreet \n     String \n     The billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break. \n   \n   \n     AccountName \n     String \n     The name on the card or the bank account \n   \n   \n     AccountReference \n     String \n     An obscured reference to the card or the bank account. \n   \n   \n     AsperatoReference \n     String \n     An Asperato generated order reference for the transaction. \n   \n   \n     AsperatoRepeatReference \n     String \n     An Asperato generated order reference for the transaction that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull. \n   \n   \n     AuthorisationID \n     String \n     Contains the Salesforce ID of an associated Authorisation if one exists.  If one was created during the update the ID of that row will be shown here. \n   \n   \n     CardType \n     String \n     If a card this will say what type of card was used otherwise will say `Not Applicable`. \n   \n   \n     CompanyName \n     String \n     The company name as entered on the paypage. \n   \n   \n     CurrencyCode \n     String \n     Three character ISO 4217 currency code. \n   \n   \n     Email \n     String \n     The email address as entered on the paypage. \n   \n   \n     FirstName \n     String \n     The first name as entered on the paypage. \n   \n   \n     LastName \n     String \n     The last name as entered on the paypage. \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         Direct Debit \n         eCheck \n         PayPal \n       \n     \n   \n   \n     PaymentScheduleID \n     String \n     Contains the Salesforce ID of an associated Subscription if one exists. \n   \n   \n     PSPReference \n     String \n     The cross reference value obtained from the payment gateway. \n   \n   \n     PSPRepeatToken \n     String \n     The cross reference value obtained from the payment gateway that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull. \n   \n   \n     SalesforceId \n     String \n     ID of the payment object row \n   \n   \n     Source \n     String \n     How the transaction was generated.  One of:\n       \n         Holder not present \n         Repeat \n         Web \n       \n     \n   \n   \n     StatusDescription \n     String \n     Text relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate. \n   \n   \n     PassThroughParameters \n     List of\nPassThroughParameter \n     This is a list of name value pairs that were passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter passed from Asperato. \n   \n   \n     Value \n     String \n     The content of the parameter passed from Asperato. \n     PutPaymentsResponse  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the overall request was successful. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     PutPaymentResponseDetails \n     List of \nPutPaymentResponseDetail \n     \n     PutPaymentResponseDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the request was successful for this row. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     SalesforceId \n     String \n     The ID of the row that was updated. \n     When implementing a service handler override class this new class should implement the interface called  asp04__IPutPaymentsService .", 
            "title": "PutPayments"
        }, 
        {
            "location": "/sf/#authorisations", 
            "text": "The two web services that relate to authorisations are labelled  GetAuthorisations  and  PutAuthorisations .", 
            "title": "Authorisations"
        }, 
        {
            "location": "/sf/#getauthorisations", 
            "text": "This gets data from the Authorisation object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.  GetAuthorisationsRequest  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     RecordID \n     String (ID) \n     Contains the Salesforce ID to a row in the payment object. \n   \n   \n     UrlParameters \n     List of\nUrlParameter \n     Any additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list. \n     GetAuthorisationsResponse  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     CPAGranted \n     Boolean \n     The existing value of the CPAGranted field in the Authorisation record. \n   \n   \n     Success \n     Boolean \n     When true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\" \n   \n   \n     UseHostedPage \n     Boolean \n     When true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template. \n   \n   \n     AuthorisationAmount \n     Long \n     Authorisation Amount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     This will be used to provide a default value for the billing address city on the paypage. \n   \n   \n     AddressCountry \n     String \n     This will be used to provide a default value for the billing address country on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     This will be used to provide a default value for the billing postal code on the paypage. \n   \n   \n     AddressState \n     String \n     This will be used to provide a default value for the billing address state/county on the paypage. \n   \n   \n     AddressStreet \n     String \n     This will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma \n   \n   \n     CompanyName \n     String \n     This will be used to provide a default value for the company name on the paypage. \n   \n   \n     CurrencyCode \n     String \n     Three character ISO 4217 currency code. \n   \n   \n     Email \n     String \n     This will be used to provide a default value for the email address on the paypage. \n   \n   \n     FirstName \n     String \n     This will be used to provide a default value for the first name on the paypage. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this will contain an indication of why the call failed. \n   \n   \n     LastName \n     String \n     This will be used to provide a default value for the last name on the paypage. \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         Direct Debit \n         eCheck \n         PayPal \n       \n     \n   \n   \n     UrlCancel \n     String \n     URL that the payment page will link to if the end customer chooses to cancel the payment process. \n   \n   \n     UrlError \n     String \n     URL that the result page will go to in the event that the transaction fails \n   \n   \n     UrlExit \n     String \n     URL that the result page will go to after a successful transaction \n   \n   \n     PassThroughParameters \n     List of\nPassThroughParameter \n     This is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     These are the list parameters mentioned above  UrlParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter as it appeared in the URL. \n   \n   \n     Value \n     String \n     The content of the parameter as it appeared in the URL. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter. \n   \n   \n     Value \n     String \n     The desired content of the parameter to be passed to Asperato. \n   \n   \n     IsDisplayOnly \n     Boolean \n     When true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again. \n     When implementing a service handler override class this new class should implement the interface called  asp04__IGetPaymentsService .", 
            "title": "GetAuthorisations"
        }, 
        {
            "location": "/sf/#putauthorisations", 
            "text": "This puts data back into Salesforce after a authorisation attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.  In reality this will only happen for the automated (repeat) journey.  To detect this test the first row of the PutAuthorisationRequestDetails array and examine the value of the Source field.  If this equates to 'Repeat' then you might expect multiple rows otherwise it will be a single element in the PutAuthorisationRequestDetails array.  PutAuthorisationsRequest  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     PutAuthorisationRequestDetails \n     List of PutAuthorisationRequestDetail \n     A list of outcomes from authorisation attempts. \n     PutAuthorisationRequestDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     CPAGranted \n     Boolean \n     When true means that the request that a continuous payment authorisation was granted by the payer. \n   \n   \n     Success \n     Boolean \n     When true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted. \n   \n   \n     EffectiveDate \n     Date \n     The date the authorisation will become effective.  This is used to establish the point at which a repeating payment cycle will start.  An example of this would be where an authorisation is set up now for a monthly repeating payment where the first payment happens in two weeks time. \n   \n   \n     ExpiryDate \n     Date \n     The date the authorisation will expire if that applies.  This could be the card expiry date for example. \n   \n   \n     RegularAmount \n     Long \n     Amount that will be processed as part of a repeating payment in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     The billing address city as entered on the paypage. \n   \n   \n     AddressCountry \n     String \n     The billing address country as selected on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     The billing address postal code as entered on the paypage. \n   \n   \n     AddressState \n     String \n     The billing address state/county as entered on the paypage. \n   \n   \n     AddressStreet \n     String \n     The billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break. \n   \n   \n     AccountName \n     String \n     The name on the card or the bank account \n   \n   \n     AccountReference \n     String \n     An obscured reference to the card or the bank account. \n   \n   \n     AsperatoRepeatReference \n     String \n     An Asperato generated order reference for the transaction that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull. \n   \n   \n     CardType \n     String \n     If a card this will say what type of card was used otherwise will say `Not Applicable`. \n   \n   \n     CompanyName \n     String \n     The company name as entered on the paypage. \n   \n   \n     Email \n     String \n     The email address as entered on the paypage. \n   \n   \n     FirstName \n     String \n     The first name as entered on the paypage. \n   \n   \n     LastName \n     String \n     The last name as entered on the paypage. \n   \n   \n     MandateReference \n     String \n     The mandate reference that should appear on any documentation sent to the payer (if applicable). \n   \n   \n     PaymentFrequency \n     String \n     The frequency that applies to a regular payment.  Will be one of:\n       \n         Single \n         Daily \n         Weekly \n         Monthly \n         Quarterly \n         Semi-annual \n         Annual \n       \n     \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         Direct Debit \n         eCheck \n         PayPal \n       \n     \n   \n   \n     PSPRepeatToken \n     String \n     The cross reference value obtained from the payment gateway that is used to make a subsequent payment.  As a rule this value will change each time a repeat (automatic) payment is successfull. \n   \n   \n     SalesforceId \n     String \n     ID of the authorisation object row \n   \n   \n     Source \n     String \n     How the transaction was generated.  One of:\n       \n         Holder not present \n         Repeat \n         Web \n       \n     \n   \n   \n     StatusDescription \n     String \n     Text relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate. \n   \n   \n     PassThroughParameters \n     List of PassThroughParameter \n     This is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter passed from Asperato. \n   \n   \n     Value \n     String \n     The content of the parameter passed from Asperato. \n     PutAuthorisationsResponse  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the overall request was successful. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     PutAuthorisationResponseDetails \n     List of PutAuthorisationResponseDetail \n     \n     PutAuthorisationResponseDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the request was successful for this row. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     SalesforceId \n     String \n     The ID of the row that was updated or created. \n     When implementing a service handler override class this new class should implement the interface called  asp04__IPutAuthorisationsService .", 
            "title": "PutAuthorisations"
        }, 
        {
            "location": "/sf/#messages", 
            "text": "The message web service is used to send messages from Asperato to Salesforce.  These messages affect the status of existing payments or authorisations.  At the moment these messages all relate to UK Direct Debits, though in future this will include SEPA direct debits and card updates.  This web service can be bulked up so is capable of sending multiple rows in a single request.  PutMessagesRequest  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     PutMessagesRequest \n     List of\nPutMessageRequestDetail \n     A list of messages. \n     PutMessageRequestDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means the message has a positive implication, when false indicates a failure of some sort. \n   \n   \n     Action \n     String \n     The action that the message implies.  Typical values are created, active, cancelled, failed, etc. \n   \n   \n     EventReference \n     String \n     A unique reference to the message. \n   \n   \n     MessageText \n     String \n     Textural content of the message truncated to 250 characters so as not cause insert failures in the standard objects. \n   \n   \n     ReasonCode \n     String \n     The raw reason code from either BACS or SEPA \n   \n   \n     Resource \n     String \n     Can be one of \n       \n         mandates \n         payments \n         refunds \n         Payouts  (not currently sent) \n         subscriptions  (not currently sent) \n       \n     \n   \n   \n     TransactionReference \n     String \n     A reference needed to locate the item to which the message refers (see below) \n     Locating the data to which a message refers.  When the resource has the text content  mandates  the message relates to an Authorisation.  To locate the correct row search for where the Payment Service Provider Repeat Token on the Authorisation row equals the TransactionReference on the request.  When the resource has the text content of either  payments  or  refunds  then the message relates to the Payment object.  To locate the correct row search for where the Payment Service Provider Reference on the Payment row equals the TransactionReference on the request.  PutMessagesResponse  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the overall request was successful. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n     When implementing a service handler override class this new class should implement the interface called  asp04__IPutMessagesService .", 
            "title": "Messages"
        }, 
        {
            "location": "/sf/#utilities", 
            "text": "There are a number of utility functions in the core Asperato ONE package that are available for use for designers and code builds that choose to extend the package.", 
            "title": "Utilities"
        }, 
        {
            "location": "/sf/#constants", 
            "text": "There is a utility class that contains the constant code values used throughout the Asperato ONE package.  It is recommended that you use these constants rather than the raw codes because that will make any customisations forward compatible.  To use a value from the Contants class simply refer to it.  For example to set the Authorisation Status to the value of 'In Force' then refer the to constant value  asp04.Constants.AUTHORISATION_STATUS_IN_FORCE .  Authorisation Status  \n   \n     Field Name \n     Code Value \n   \n   \n     AUTHORISATION_STATUS_CANCELLED \n     Cancelled \n   \n   \n     AUTHORISATION_STATUS_FAILED \n     Failed \n   \n   \n     AUTHORISATION_STATUS_IN_FORCE \n     In Force \n   \n   \n     AUTHORISATION_STATUS_PENDING \n     Pending \n     Payment Route  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_TYPE_CARD \n     Card \n   \n   \n     PAYMENT_TYPE_DIRECT_DEBIT \n     DirectDebit \n   \n   \n     PAYMENT_TYPE_ECHECK \n     Echeck \n   \n   \n     PAYMENT_TYPE_WALLET \n     PayPal \n     Payment Source  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_SOURCE_HOLDER_NOT_PRESENT \n     Holder not present \n   \n   \n     PAYMENT_SOURCE_REPEAT \n     Repeat \n   \n   \n     PAYMENT_SOURCE_WEB \n     Web \n     Payment Status  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_STATUS_PENDING \n     Submitted for collection \n   \n   \n     PAYMENT_STATUS_PAID \n     Collected from customer \n   \n   \n     PAYMENT_STATUS_REFUNDED \n     Refunded to customer \n   \n   \n     PAYMENT_STATUS_FAILED \n     Failed \n   \n   \n     PAYMENT_STATUS_PAYMENT_SCHEDULED \n     Awaiting submission \n     Payment Type  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_TYPE_PAYMENT \n     Payment \n   \n   \n     PAYMENT_TYPE_REFUND \n     Refund \n     Payment Schedule Frequency  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_SINGLE \n     Single \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_DAILY \n     Daily \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_WEEKLY \n     Weekly \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_MONTHLY \n     Monthly \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_QUARTERLY \n     Quarterly \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_BIANNUALLY \n     Semi-annual \n   \n   \n     PAYMENT_SCHEDULE_FREQUENCY_ANNUALLY \n     Annual \n     Payment Schedule Frequency  \n   \n     Field Name \n     Code Value \n   \n   \n     PAYMENT_SCHEDULE_STATUS_ACTIVE \n     Active \n   \n   \n     PAYMENT_SCHEDULE_STATUS_EXPIRED \n     Expired \n   \n   \n     PAYMENT_SCHEDULE_STATUS_INACTIVE \n     Inactive \n     Messages Resource  \n   \n     Field Name \n     Code Value \n   \n   \n     MESSAGE_MANDATES \n     mandates \n   \n   \n     MESSAGE_PAYMENTS \n     payments \n   \n   \n     MESSAGE_REFUNDS \n     refunds", 
            "title": "Constants"
        }, 
        {
            "location": "/sf/#resolve-the-payment-route-from-text-to-a-code", 
            "text": "Asperato uses four character codes to represent the type of transaction that is to take place.  This appears in the repeat payment process.  There is a utility function available that will resolve the text to a code.", 
            "title": "Resolve the payment route from text to a code"
        }, 
        {
            "location": "/sf/#customisation", 
            "text": "The standard package service handlers can be overlayed with custom versions if that is desired.  The custom class has to implement its appropriate interface and then have code to action that interface methods.  This is a simple example of an class that overrides the handler for the PutPayments web service.  public with sharing class MyOverridePutPaymentsServiceHandler implements asp04.IPutPaymentsService\n{\n    public asp04.PutPaymentsService.PutPaymentsResponse PutPayments(asp04.PutPaymentsService.PutPaymentsRequest request)\n    {\n        asp04.PutPaymentsService.PutPaymentsResponse response = new asp04.PutPaymentsService.PutPaymentsResponse();\n\n        // the real code goes here\n\n        return response;\n    }\n}", 
            "title": "Customisation"
        }, 
        {
            "location": "/templates/", 
            "text": "Payment template\n\n\nThe standard payment template is provided by Asperato and will look similar to the following:\n\n\n\n\nTemplate features\n\n\nOut of the box, the template is highly dynamic and responds to a number of different parameters that can be set either from Salesforce or from the URL:\n\n\n\n\nAmount\n\n\nFrequency (including one off payments)\n\n\nPayment types (including combinations of payment types, such as Card \n Direct Debit, Paypal \n Direct Debit, Card, Paypal \n eCheck, etc.)\n\n\nAddress data (can be pre-populated)\n\n\nURL to navigate to on completion of the payment\n\n\n\n\nThe template also has the following dynamic elements built in:\n\n\n\n\nNotification if the Salesforce webservice cannot be contacted\n\n\nUK postcode checker \n lookup\n\n\nDisplay of card type based on card number\n\n\nValidation of card number using Luhn algorithm\n\n\nDisplay of issue number \n start date fields only if the card requires it\n\n\nValidation of security code as 3 or 4 digits depending on the card type\n\n\nAbility to switch between Card, Direct debit, eCheck or Paypal on the fly\n\n\nAbility to enter IBAN or distinct local bank details for all BACS / SEPA European Direct Debit countries\n\n\nAutomatic hiding / showing and labelling of local bank detail fields based on selected country\n\n\nCompliant to BACS and SEPA scheme rules, correct compliance labelling is determined by scheme rules in the selected country\n\n\n\n\nThe template is fully responsive, works on all the latest versions of major browsers, and is routinely updated by Asperato to work with new card ranges and payment types.\n\n\nPassing parameters\n\n\nParameters may be passed to the payment page via URL parameters, as well as from Salesforce. Passing parameters in the URL is often useful for testing purposes.\n\n\nThe parameters are simply added to the end of the URL in the normal \nGET\n format. For the parameter names, please see the \"Field names\" section below.\n\n\nAs an example, if the normal URL to the payment page is:\n\n\nhttps://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73\ncampaignRef=431\n\n\nThen the email can be pre-populated to \"test@asperato.com\", and the amount to \u00a312 with the following URL:\n\n\nhttps://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73\ncampaignRef=431\nDLemail=test@asperato.com\nDLamount=12\n\n\nMinor stylistic changes\n\n\nMinor stylistic changes, such as the fonts, colours and logo used can be made by Asperato. If you would like any customised changes in this regard, contact support@asperato.com with details of the changes required.\n\n\nUsing the template in an iframe\n\n\nMany customers wish to use the template in an iframe as part of their existing site, rather than displaying it as a standalone page - this is supported by Asperato, as long as the containing site is served over TLS1.2 or newer. Please make sure your iframe element is large enough to contain the payment form without any scrollbars. We recommend a size of at least 500px width and 1000px height.\n\n\nNon-secure pages may not iframe the Asperato payment page in this way, as customers have no easy way of determining that the iframe itself is securing if the surrounding page is not.\n\n\nField names\n\n\nThese field names can be passed to the URL of the payment page to pre-populate details.\n\n\nDLamount\n\n\nThe amount to charge. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.\n\n\nDLemail\n\n\nThe email address of the customer.\n\n\nDLforename\n\n\nThe first name.\n\n\nDLlastname\n\n\nThe last name.\n\n\nDLaddress1\n\n\nThe first line of the address.\n\n\nDLaddress2\n\n\nThe second line of the address.\n\n\nDLcity\n\n\nThe town or city of the address.\n\n\nDLcounty\n\n\nThe county or state of the address.\n\n\nDLcountry\n\n\nThe country of the address.\n\n\nDLpostcode\n\n\nThe postcode, or zip code of the address.\n\n\nEntirely custom payment page\n\n\nIt is possible, but not recommended, to design a custom payment page from scratch with the above functionality. In our experience this rarely works well due to the number of corner cases that must be covered. If you choose this route for your payment pages, it will incur an additional setup charge and will not be supported by Asperato.", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#payment-template", 
            "text": "The standard payment template is provided by Asperato and will look similar to the following:", 
            "title": "Payment template"
        }, 
        {
            "location": "/templates/#template-features", 
            "text": "Out of the box, the template is highly dynamic and responds to a number of different parameters that can be set either from Salesforce or from the URL:   Amount  Frequency (including one off payments)  Payment types (including combinations of payment types, such as Card   Direct Debit, Paypal   Direct Debit, Card, Paypal   eCheck, etc.)  Address data (can be pre-populated)  URL to navigate to on completion of the payment   The template also has the following dynamic elements built in:   Notification if the Salesforce webservice cannot be contacted  UK postcode checker   lookup  Display of card type based on card number  Validation of card number using Luhn algorithm  Display of issue number   start date fields only if the card requires it  Validation of security code as 3 or 4 digits depending on the card type  Ability to switch between Card, Direct debit, eCheck or Paypal on the fly  Ability to enter IBAN or distinct local bank details for all BACS / SEPA European Direct Debit countries  Automatic hiding / showing and labelling of local bank detail fields based on selected country  Compliant to BACS and SEPA scheme rules, correct compliance labelling is determined by scheme rules in the selected country   The template is fully responsive, works on all the latest versions of major browsers, and is routinely updated by Asperato to work with new card ranges and payment types.", 
            "title": "Template features"
        }, 
        {
            "location": "/templates/#passing-parameters", 
            "text": "Parameters may be passed to the payment page via URL parameters, as well as from Salesforce. Passing parameters in the URL is often useful for testing purposes.  The parameters are simply added to the end of the URL in the normal  GET  format. For the parameter names, please see the \"Field names\" section below.  As an example, if the normal URL to the payment page is:  https://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73 campaignRef=431  Then the email can be pre-populated to \"test@asperato.com\", and the amount to \u00a312 with the following URL:  https://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73 campaignRef=431 DLemail=test@asperato.com DLamount=12", 
            "title": "Passing parameters"
        }, 
        {
            "location": "/templates/#minor-stylistic-changes", 
            "text": "Minor stylistic changes, such as the fonts, colours and logo used can be made by Asperato. If you would like any customised changes in this regard, contact support@asperato.com with details of the changes required.", 
            "title": "Minor stylistic changes"
        }, 
        {
            "location": "/templates/#using-the-template-in-an-iframe", 
            "text": "Many customers wish to use the template in an iframe as part of their existing site, rather than displaying it as a standalone page - this is supported by Asperato, as long as the containing site is served over TLS1.2 or newer. Please make sure your iframe element is large enough to contain the payment form without any scrollbars. We recommend a size of at least 500px width and 1000px height.  Non-secure pages may not iframe the Asperato payment page in this way, as customers have no easy way of determining that the iframe itself is securing if the surrounding page is not.", 
            "title": "Using the template in an iframe"
        }, 
        {
            "location": "/templates/#field-names", 
            "text": "These field names can be passed to the URL of the payment page to pre-populate details.", 
            "title": "Field names"
        }, 
        {
            "location": "/templates/#dlamount", 
            "text": "The amount to charge. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.", 
            "title": "DLamount"
        }, 
        {
            "location": "/templates/#dlemail", 
            "text": "The email address of the customer.", 
            "title": "DLemail"
        }, 
        {
            "location": "/templates/#dlforename", 
            "text": "The first name.", 
            "title": "DLforename"
        }, 
        {
            "location": "/templates/#dllastname", 
            "text": "The last name.", 
            "title": "DLlastname"
        }, 
        {
            "location": "/templates/#dladdress1", 
            "text": "The first line of the address.", 
            "title": "DLaddress1"
        }, 
        {
            "location": "/templates/#dladdress2", 
            "text": "The second line of the address.", 
            "title": "DLaddress2"
        }, 
        {
            "location": "/templates/#dlcity", 
            "text": "The town or city of the address.", 
            "title": "DLcity"
        }, 
        {
            "location": "/templates/#dlcounty", 
            "text": "The county or state of the address.", 
            "title": "DLcounty"
        }, 
        {
            "location": "/templates/#dlcountry", 
            "text": "The country of the address.", 
            "title": "DLcountry"
        }, 
        {
            "location": "/templates/#dlpostcode", 
            "text": "The postcode, or zip code of the address.", 
            "title": "DLpostcode"
        }, 
        {
            "location": "/templates/#entirely-custom-payment-page", 
            "text": "It is possible, but not recommended, to design a custom payment page from scratch with the above functionality. In our experience this rarely works well due to the number of corner cases that must be covered. If you choose this route for your payment pages, it will incur an additional setup charge and will not be supported by Asperato.", 
            "title": "Entirely custom payment page"
        }
    ]
}