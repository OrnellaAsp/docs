{
    "docs": [
        {
            "location": "/", 
            "text": "Asperato developer documentation\n\n\nThis documentation is designed for developers who are performing an Asperato integration.\n\n\nOverview\n\n\nIf you would like a general overview of how a payment works when taken through Asperato, this is a good place to start.\n\n\nTemplate documentation\n\n\nThis page\n covers customising a template to work with Asperato.\n\n\nSalesforce documentation\n\n\nThis page\n covers the creation of a custom Salesforce package to work with Asperato.\n\n\nNeed help?\n\n\nIf you requrie any assistance with your integration then please contact support@asperato.com, we'll aim to get back to you in a couple of working days.\n\n\nSource\n\n\nThese documents are written in Markdown and \nhosted on GitHub\n. Feel free to create an issue or submit a pull request if you spot a mistake.", 
            "title": "Home"
        }, 
        {
            "location": "/#asperato-developer-documentation", 
            "text": "This documentation is designed for developers who are performing an Asperato integration.", 
            "title": "Asperato developer documentation"
        }, 
        {
            "location": "/#overview", 
            "text": "If you would like a general overview of how a payment works when taken through Asperato, this is a good place to start.", 
            "title": "Overview"
        }, 
        {
            "location": "/#template-documentation", 
            "text": "This page  covers customising a template to work with Asperato.", 
            "title": "Template documentation"
        }, 
        {
            "location": "/#salesforce-documentation", 
            "text": "This page  covers the creation of a custom Salesforce package to work with Asperato.", 
            "title": "Salesforce documentation"
        }, 
        {
            "location": "/#need-help", 
            "text": "If you requrie any assistance with your integration then please contact support@asperato.com, we'll aim to get back to you in a couple of working days.", 
            "title": "Need help?"
        }, 
        {
            "location": "/#source", 
            "text": "These documents are written in Markdown and  hosted on GitHub . Feel free to create an issue or submit a pull request if you spot a mistake.", 
            "title": "Source"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview and responsibilities\n\n\nAn overview of the payment lifecycle can be viewed in the following diagram:\n\n\n\n\nDetailed overview\n\n\n\n\n\n\nUser loads customer website\n The payment journey will always start from the customer website - the user may click a link to donate, go to a checkout after inserting some items in a basket, or any other action that requires a payment to be taken.\n\n\n\n\n\nUser enters details unrelated to payments\n \nThis step is optional.\n Asperato will, by default, collect all data required to process a payment. However, many customers wish to collect other data that will also populate the Salesforce record - eg. \"How did you hear about us\" questions. If this type of data is required, it should be collected at this point.\n\n\n\n\n\nPayment record is created in Salesforce\n The Asperato ONE package provides a webservice to create a default, empty payment record that can then be used to take a payment. Where payment options do not need to be customised, this is the simplest approach, and the responsibility of creating the record lies with the Asperato ONE package.\n\nHowever, where a greater level of customisation is required, the payment record can be created via any other means in Salesforce. This custom route allows intelligent customisation of the payment page based on any data available - eg. if the amount is greater than $1000, you may choose to only allow credit cards, if the payor is in the UK you may wish to only allow direct debit, etc.\n\n\n\n\n\nCustomisable Asperato payment page is shown\n A URL is generated from the payment record after its creation, and this URL will show the payment page for this particular payment. By default, Asperato provide a fully working, customisable and responsive payment page that opens in a new window to take the payment. However, the template may be customised extensively if required (see Template Documentation) and may also be inlined into your own website via an iframe for a smoother user journey.\n\n\n\n\n\nUser enters details relating to payment\n The user enters all the payment details on the securely hosted Asperato payment page.\n\n\n\n\n\nUser submits payment details to Asperato\n The user presses the submit button on the payment page, which sends the payment details to the Asperato server.\n\n\n\n\n\nAsperato communicates with PSPs (Payment Service Providers)\n Asperato receives the payment details and then communicates with the PSP that is set up for the given customer and payment route (Stripe, Sagepay, GoCardless, Paypal, etc.)\n\n\n\n\n\nAsperato updates the relevant payment record in Salesforce\n After the PSP has responded, Asperato will update the payment object with the relevant details. If the transaction has failed then Asperato will report the reason for failure; if the transaction is successful Asperato will update the payment with the payor details. If there is an error in Salesforce that causes the record not to update for any reason (and Salesforce reports this error), we will email details of the issue to a pre-configured email address or mailing list.\n\n\n\n\n\nAsperato displays the exit or error page\n If the transaction was successful, Asperato will display an \"exit page\", otherwise will display an \"error page\". Similarly to the payment page, both the exit and error page are provided by default, but can also be extensively customised.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview-and-responsibilities", 
            "text": "An overview of the payment lifecycle can be viewed in the following diagram:", 
            "title": "Overview and responsibilities"
        }, 
        {
            "location": "/overview/#detailed-overview", 
            "text": "User loads customer website  The payment journey will always start from the customer website - the user may click a link to donate, go to a checkout after inserting some items in a basket, or any other action that requires a payment to be taken.   User enters details unrelated to payments   This step is optional.  Asperato will, by default, collect all data required to process a payment. However, many customers wish to collect other data that will also populate the Salesforce record - eg. \"How did you hear about us\" questions. If this type of data is required, it should be collected at this point.   Payment record is created in Salesforce  The Asperato ONE package provides a webservice to create a default, empty payment record that can then be used to take a payment. Where payment options do not need to be customised, this is the simplest approach, and the responsibility of creating the record lies with the Asperato ONE package. \nHowever, where a greater level of customisation is required, the payment record can be created via any other means in Salesforce. This custom route allows intelligent customisation of the payment page based on any data available - eg. if the amount is greater than $1000, you may choose to only allow credit cards, if the payor is in the UK you may wish to only allow direct debit, etc.   Customisable Asperato payment page is shown  A URL is generated from the payment record after its creation, and this URL will show the payment page for this particular payment. By default, Asperato provide a fully working, customisable and responsive payment page that opens in a new window to take the payment. However, the template may be customised extensively if required (see Template Documentation) and may also be inlined into your own website via an iframe for a smoother user journey.   User enters details relating to payment  The user enters all the payment details on the securely hosted Asperato payment page.   User submits payment details to Asperato  The user presses the submit button on the payment page, which sends the payment details to the Asperato server.   Asperato communicates with PSPs (Payment Service Providers)  Asperato receives the payment details and then communicates with the PSP that is set up for the given customer and payment route (Stripe, Sagepay, GoCardless, Paypal, etc.)   Asperato updates the relevant payment record in Salesforce  After the PSP has responded, Asperato will update the payment object with the relevant details. If the transaction has failed then Asperato will report the reason for failure; if the transaction is successful Asperato will update the payment with the payor details. If there is an error in Salesforce that causes the record not to update for any reason (and Salesforce reports this error), we will email details of the issue to a pre-configured email address or mailing list.   Asperato displays the exit or error page  If the transaction was successful, Asperato will display an \"exit page\", otherwise will display an \"error page\". Similarly to the payment page, both the exit and error page are provided by default, but can also be extensively customised.", 
            "title": "Detailed overview"
        }, 
        {
            "location": "/sf/", 
            "text": "Salesforce package\n\n\nThe core package consists of three custom objects and a set of web services that communicate between Asperato and Salesforce.  The web services are all managed through Apex classes.  The package is designed to be extensible so that the package web service classes can be replaced by custom Apex code if that is required.  \n\n\nThere are simple VisualForce pages to support each of the data objects and tabs accessing these are grouped together into an Asperato application.\n\n\nThe configuration of the package is managed via Custom Metadata.  There are two Metadata Types, Asperato Settings and Service Handler.  The options available for these settings are described below.\n\n\nInstallation\n\n\nThe core package is installed using a Salesforce package deployment link.\n\n\nFor a sandbox organisation this link is:\n\n\nhttps://test.salesforce.com/packaging/installPackage.apexp?p0=04t240000006Usj\n\n\nFor a live or development organisation this link is:\n\n\nhttps://login.salesforce.com/packaging/installPackage.apexp?p0=04t240000006Usj\n\n\nWhen installing make sure that the package is accessible by all Salesforce users (this is not the default).\n\nOnce the package has been installed you need to update the system Network Security so that the Asperato servers can communicate with your Salesforce organisation.\nAs a system administrator go to:\n\n\nSetup \n Administer \n Security Controls \n Network Access\n\nAdd the following Trusted IP Ranges:\n\n\n\n\nStart IP Address: 77.68.42.36\n\nEnd IP Address: 77.68.42.36\n\nDescription: Asperato Test\n\n\nStart IP Address: 162.13.56.213\n\nEnd IP Address: 162.13.56.213\n\nDescription: Asperato Live\n\n\n\n\nYou will need to obtain a reference code from Asperato.  This code is known as the \npmRef\n and this needs to be recorded into a Custom Metadata object.\nOnce you have obtained the code from Asperato in Salesforce go to\n\n\nSetup \n Build \n Develop \n Custom Metadata Types\n\nIn the list that is displayed you will see \u2018Asperato Settings\u2019.\n\nClick on the \u2018Manage Records\u2019 link.\n\nOn the list that is then displayed \u2018Edit\u2019 the line with the label \u2018Default\u2019.\n\nChange the \npmRef\n value to that supplied to you by Asperato and save the record.\n\n\nDesign overview\n\n\nThe web journey\n\n\nThe web journey is where a payment or an authorisation is set up via screens that require interaction from a paying person.  This is typically through links in a website, links sent in email communications or direct from Salesforce via a button or a link.\n\n\nThe journey starts with a URL that invokes an Asperato program.  The URL will contain at least one parameter (\npmRef\n) and might have several more.  This are described more fully elsewhere.  The parameters are used to:\n\n  * Obtain configuration from Asperato using the \npmRef\n parameter.\n\n  * Obtain data from Salesforce using either the GetAuthorisations REST webservice or the GetPayments REST webservice.  The requests and responses for these services are described fully elsewhere in this documentation.\n\n\nThe Asperato program combines the configuration and the data to create a dynamic web screen that is then displayed to the person making the payment in a web browser.\n\nThe payer then enters data to the web screen and control then passes to another Asperato program.\n\nThis second program accepts and validates the data input and then calls the relevant payment gateway.\n\nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.\n\nAsperato then displays the outcome of the whole transaction on either a success or a fail screen.\n\n\nThe automatic (repeat) payment journey\n\n\nThe automatic payment journey is the process by which a payment can be taken without the need for screen input on behalf of the payer based on an authorisation that has already been put in place.  This authorisation is typically a Direct Debit mandate or a card continuous payment authority.\n\n\nThe journey starts in Salesforce where suitable code creates a list of payments that are due for collection.  \n\nThis list of payments is then sent to Asperato using a REST web service.\n\nAsperato then applies validation to each line in the list and either accepts or rejects the individual request line.\n\nFor those lines that are accepted Asperato calls the relevant gateway. \n\nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.\n\n\nTerminology\n\n\nIn Asperato terms an Authorisation is a record of an authority given by a payer to collect automatic payments.  This will take the physical form of either a Direct Debit mandate or a card Continuous Payment Authorisation (CPA).  Creating an authority does not take money from the associated account, it merely sets up the mechanism to allow that to happen in the future.  There are rules in force about what you have to tell the payer when you set up an authority and when you take payments using it.  Those rules vary depending on the payment route you are using.\n\n\nA Payment is a financial transaction.  This can include a refund. Its key attributes are that is has an amount, currency, a due date and a payment route.\n\n\nIn Asperato terms an Automatic or Repeat payment is defined as where:\n\nThe payment frequency is not \u2018Single\u2019.\n\nThe payment frequency is \u2018Single\u2019 but the payment due date is in the future.\n\nThe payment route is either BACS or SEPA since these require authorisations even for one off payments\n\n\nPayment scenarios\n\n\nBasic actions on the data in Salesforce:\n(a) Create new Authorisation row\n\n(b) Update existing Authorisation row\n\n(c) Create a new Payment row\n\n(d) Update an existing Payment row\n\n\nThese are the data scenarios that the package is designed to deal with:\n\n\n  \n\n    \nScenario\n\n    \nAction\n\n  \n\n  \n\n    \nNew authority where no data currently exists\n\n    \n(a)\n\n  \n\n  \n\n    \nNew authority where an Authorisation row already exists\n\n    \n(b)\n\n  \n\n  \n\n    \nUpdate to an existing authority\n\n    \n(b)\n\n  \n\n  \n\n    \nSingle payment where no data currently exists\n\n    \n(c)\n\n  \n\n  \n\n    \nSingle payment where a Payment row already exists\n\n    \n(d)\n\n  \n\n  \n\n    \nRepeat payment where where no data currently exists on either Authorisation or Payment\n\n    \n(a) + (c)\n\n  \n\n  \n\n    \nRepeat payment where where no data currently exists on Payment but an Authorisation exists\n\n    \n(b) + (c)\n\n  \n\n  \n\n    \nRepeat payment where where data exists on Payment but no Authorisation exists\n\n    \n(a) + (d)\n\n  \n\n  \n\n    \nRepeat payment where where rows exist on both Authorisation and Payment\n\n    \n(b) + (d)\n\n  \n\n  \n\n    \nSubsequent repeat payment (i.e. an automatic payment)\n\n    \n(b) + (d)\n\n  \n\n\n\n\nThe data objects\n\n\nThe package data objects are called \nPayment\n, \nSubscription\n and \nAuthorisation\n and they are related to each other as per the diagram below.\n\n\n\n\nAuthorisation\n\n\nAuthorisation contains data relating to an authority to collect payments.  This can take the form of either a Direct Debit mandate or a card continuous payment authority.\n\n\nThe fields and their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAccount Name\n\n    \nRecords the name on the bank account or the cardholder name for future reference.\n\n  \n\n  \n\n    \nAccount Reference\n\n    \nA partially obscured record of the bank account or credit card number for future reference.\n\n  \n\n  \n\n    \nBilling Address City\n\n    \nRecords the city in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Country\n\n    \nRecords the country in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address PostalCode\n\n    \nRecords the postal code in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address State\n\n    \nRecords the state/county in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Street\n\n    \nRecords the street(s) in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nCard Type\n\n    \nThe type of credit or debit card, or `Not Applicable` for the other Authorisation Types.\n\n  \n\n  \n\n    \nCPA Granted\n\n    \nIndicates that the customer has given permission for card details to be used to collect automatic payments.\n\n  \n\n  \n\n    \nEmail\n\n    \nRecords the email address that was captured on the payment page.\n\n  \n\n  \n\n    \nExpiry Date\n\n    \nThe date on the which the authorisation will expire (if applicable).\n\n  \n\n  \n\n    \nMandate Reference\n\n    \nThe reference for a Direct Debit mandate that will need to be displayed to the end customer in emails and other communication.\n\n  \n\n  \n\n    \nPayment Route\n\n    \nOne of:\n      \n\n        \nCard\n Credit or debit card\n\n        \nBACS\n UK Direct Debit\n\n        \neCheck\n   US Bank payment\n\n        \nSEPA\n European Direct Debit\n\n        \nWallet\n PayPal, etc.\n\n      \n\n    \n\n  \n\n  \n\n    \nRepeat Cross Reference\n\n    \nOne of a pair of fields needed to make a repeat payment request.\n\n  \n\n  \n\n    \nRepeat Order ID\n\n    \nOne of a pair of fields needed to make a repeat payment request.\n\n  \n\n  \n\n    \nStatus\n\n    \nThe status of the authorisation.  Can be one of:\n      \n\n        \nPending\n Has been created but is not yet active\n\n        \nIn Force\n In force and ready to use\n\n        \nCancelled\n Has been stopped\n\n        \nFailed\n Has failed for some reason\n\n      \n\n    \n\n  \n\n  \n\n    \nStatus Description\n\n    \nA descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example.\n\n  \n\n\n\n\n\nSubscription\n\n\nSubscription contains the information needed to drive the creation of payments where they need to recur automatically.\n\n\nSubscription has a lookup relationship with Authorisation.\n\n\nThe fields are their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAuthorisation\n\n    \nA link to the related Authorisation object.  A subscription must have and entry here in order to process a payment.\n\n  \n\n  \n\n    \nAuthorisation Status\n\n    \nA formula reflecting the status of the associated Authorisation.\n\n  \n\n  \n\n    \nDay of the Month\n\n    \nThe day of the month on which the subscription payment should be taken.\n\n  \n\n  \n\n    \nFrequency\n\n    \nThe payment frequency for the subscription.\n\n  \n\n  \n\n    \nLast Payment Date\n\n    \nThe date on which the subscription payment request was last raised.\n\n  \n\n  \n\n    \nNext Payment Date\n\n    \nThe date on which the next payment request will be raised.\n\n  \n\n  \n\n    \nPayment Route\n\n    \nA formula reflecting the payment route of the associated Authorisation.\n\n  \n\n  \n\n    \nRegular Amount\n\n    \nThe amount of the subscription charge.  The currency will be determined based on the currency of the Subscription record in a multi-currency org or from the org default currency for a single currency org.\n\n  \n\n  \n\n    \nStart Date\n\n    \nDate of which the subscription come into force.\n\n  \n\n  \n\n    \nStatus\n\n    \nThe status of the subscription.  Can be one of:\n      \n\n        \nIn Force\n In force and ready to use\n\n        \nCancelled\n Has been stopped\n\n      \n\n    \n\n  \n\n  \n\n    \nStatus Description\n\n    \nA descriptive text showing the reason related to the current status.  Might contain the reason for cancellation for example.\n\n  \n\n\n\n\n\nPayment\n\n\nPayment contains both the request for a payment to occur and also the response once it has been processed.\n\n\nPayment has a lookup relationship to both Authorisation and Subscription.\n\n\nThe fields are their usage are described below: \n\n\n\n  \n\n    \nField\n\n    \nUsage\n\n  \n\n  \n\n    \nAccount Name\n\n    \nRecords the name on the bank account or the cardholder name for future reference.\n\n  \n\n  \n\n    \nAccount Reference\n\n    \nA partially obscured record of the bank account or credit card number for future reference.\n\n  \n\n  \n\n    \nAmount\n\n    \nThe amount of the payment.  Will contain either the requested amount of the amount actually collected depending on the status of the payment.\n\n  \n\n  \n\n    \nAuthorisation\n\n    \nA link to the related Authorisation object if appropriate.\n\n  \n\n  \n\n    \nBilling Address City\n\n    \nRecords the city in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Country\n\n    \nRecords the country in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address PostalCode\n\n    \nRecords the postal code in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address State\n\n    \nRecords the state/county in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nBilling Address Street\n\n    \nRecords the street(s) in the billing address that was captured on the payment page.\n\n  \n\n  \n\n    \nCard Type\n\n    \nThe type of credit or debit card, or `Not Applicable` for the other Payment Types\n\n  \n\n  \n\n    \nCross Reference\n\n    \nA reference to the payment generated by the payment gateway.\n\n  \n\n  \n\n    \nEmail\n\n    \nRecords the email address that was captured on the payment page.\n\n  \n\n  \n\n    \nFrequency\n\n    \nA formula reflecting the payment frequency from the associated subscription if appropriate.\n\n  \n\n  \n\n    \nOrder ID\n\n    \nA unique reference to the payment transaction generated by Asperato and reflected through to the payment gateway.\n\n  \n\n  \n\n    \nOriginal Payment\n\n    \nA way of cross relating payments, for example where one transaction is a refund of another.\n\n  \n\n  \n\n    \nPayment Date\n\n    \nThe date on which the payment was made.\n\n  \n\n  \n\n    \nPayment Route\n\n    \nOne of:\n      \n\n        \nCard\n Credit or debit card\n\n        \nBACS\n UK Direct Debit\n\n        \neCheck\n US Bank payment\n\n        \nSEPA\n European Direct Debit\n\n        \nWallet\n PayPal, etc.\n\n      \n\n    \n\n  \n\n  \n\n    \nScheduled Date\n\n    \nDate on which a payment is scheduled to be processed.  Can be used to set up payments that are due in the future.\n\n  \n\n  \n\n    \nSent Date\n\n    \nDate on which an automatic payment was sent to Asperato for processing.\n\n  \n\n  \n\n    \nSource\n\n    \nPayment source.  Can be one of:\n\nWeb\n\n\nHolder not present\n\n\nRepeat\n\n  \n\n  \n\n    \nStatus\n\n    \nThe status of the payment.  Can be one of:\n      \n\n        \nPending\n Has been created but is not yet active\n\n        \nSent\n Has been set to Asperato for processing.\n\n        \nPaid\n Has been paid.\n\n        \nRefunded\n Has been refunded.\n\n        \nFailed\n Has failed for some reason\n\n        \nPayment Scheduled\n Is ready for collection by the next batch run.\n\n      \n\n    \n\n  \n\n  \n\n    \nStatus Description\n\n    \nA descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example.\n\n  \n\n  \n\n    \nSubscription\n\n    \nA link to the related Subscription record if appropriate.\n\n  \n\n  \n\n    \nType\n\n    \nOne of:\n      \n\n        \nPayment\n\n        \nRefund\n\n      \n\n    \n\n  \n\n\n\n\n\nThe Custom Metadata Type settings\n\n\nThere are two Custom Metadata Types that affect the way that the Asperato Phoenix package operates.\n\n\nAsperato Settings\n\n\nThere is a single record in this Metadata Type with the Label of Default.  When managing this record there are three fields available.\n\n\nThe first of these field is labeled \npmRef\n.  The value for this field is provided by Asperato and relates the Salesforce organisation to the equivalent configurations within the Asperato databases.  You must set this value before using the package to take payments etc.\n\n\nThe second field is labeled \nOperating Mode\n.  This is a select box with two options, Test and Live.  Switching this value will automatically switch Asperato server endpoints between the sandbox test environment and the live server environment.  Leave this setting as \nTest\n until such time as the live configuration has been established with Asperato.\n\n\nThe third field is labelled \nDirect Debit Lead Time\n.  This is a numeric field with a default value of 4 and this represents the number of days before a payment is due that the process of collecting that payment will start.  This is to compensation for the inherent delays in the UK BACS payment system.  This value can be tuned if needed. Under normal circumstances you should leave this value at the default.\n\n\nService Handlers\n\n\nThere are five records in the Service Handlers Metadata Type and these are used to implement overrides to standard package service handlers.  A service handler is an Apex class that processes the data provided in a web service call and builds the appropriate response.  The full details for each of the web services available and how to create the Apex needed is described in the Web Services section.\n\n\nThe only field you can edit for each record is the Handler Name.  This is the name of the Apex class that will be executed for the relevant handler.  The complete list of the Service Handlers and their default values is shown in the table below.  The Interface Name is the name of the interface that the service handler implements.\n\n\n\n  \n\n    \nLabel\n\n    \nDefault Handler\n\n    \nInterface Name\n\n  \n\n  \n\n    \nGetAuthorisations\n\n    \nGetAuthorisationsService\n\n    \nIGetAuthorisationsService\n\n  \n\n  \n\n    \nGetPayments\n\n    \nGetPaymentsService\n\n    \nIGetPaymentsService\n\n  \n\n  \n\n    \nPutAuthorisations\n\n    \nPutAuthorisationsService\n\n    \nIPutAuthorisationsService\n\n  \n\n  \n\n    \nPutMessages\n\n    \nPutMessagesService\n\n    \nIPutMessagesService\n\n  \n\n  \n\n    \nPutPayments\n\n    \nPutPaymentsService\n\n    \nIPutPaymentsService\n\n  \n\n\n\n\n\nWeb Services\n\n\nEach web service consists of an Apex REST endpoint and an associated Apex class that processes the REST request object and builds the relevant response object.  The Apex class that processes the REST data exchange is called a service handler and the actual name of the service handler is driven by Custom Metadata.\n\n\nSo in simple terms to create a new Apex service handler you create a new Apex class that implements the relevant interface and update the Custom Metadata to point to the new class.  Next time that the web service fires, the service handler that executes would be your code rather than that supplied by the Asperato Phoenix package.\n\n\nThere are three sets of web services relating to payments, authorisations and message updates.\n\n\nPayments\n\n\nThe two web services that relate to payments are labelled \nGetPayments\n and \nPutPayments\n.\n\n\nGetPayments\n\n\nThis gets data from the Payment object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.\n\n\nRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nRecordID\n\n    \nString (ID)\n\n    \nContains the Salesforce ID to a row in the payment object.\n\n  \n\n  \n\n    \nUrlParameters\n\n    \nList of\nUrlParameter\n\n    \nAny additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list.\n\n  \n\n\n\n\n\nResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\"\n\n  \n\n  \n\n    \nUseHostedPage\n\n    \nBoolean\n\n    \nWhen true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template.\n\n  \n\n  \n\n    \nDueDate\n\n    \nDate\n\n    \nThe date on which the payment is due.\n\n  \n\n  \n\n    \nAmount\n\n    \nLong\n\n    \nAmount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address city on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address country on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing postal code on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address state/county on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThis will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma\n\n  \n\n  \n\n    \nCompanyName\n\n    \nString\n\n    \nThis will be used to provide a default value for the company name on the paypage.\n\n  \n\n  \n\n    \nCurrencyCode\n\n    \nString\n\n    \nThree character ISO 4217 currency code.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThis will be used to provide a default value for the email address on the paypage.\n\n  \n\n  \n\n    \nFirstName\n\n    \nString\n\n    \nThis will be used to provide a default value for the first name on the paypage.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this will contain an indication of why the call failed.\n\n  \n\n  \n\n    \nLastName\n\n    \nString\n\n    \nThis will be used to provide a default value for the last name on the paypage.\n\n  \n\n  \n\n    \nPaymentFrequency\n\n    \nString\n\n    \nOne of:\n      \n\n        \nSingle\n\n        \nDaily\n\n        \nWeekly\n\n        \nMonthly\n\n        \nQuarterly\n\n        \nSemi-annual\n\n        \nAnnual\n\n      \n\n    \n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nBACS\n\n        \neCheck\n\n        \nSEPA\n\n        \nWallet\n\n      \n\n    \n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nThe Salesforce ID of the payment object row to which the request relates.\n\n  \n\n  \n\n    \nUrlCancel\n\n    \nString\n\n    \nURL that the payment page will link to if the end customer chooses to cancel the payment process.\n\n  \n\n  \n\n    \nUrlError\n\n    \nString\n\n    \nURL that the result page will go to in the event that the transaction fails\n\n  \n\n  \n\n    \nUrlExit\n\n    \nString\n\n    \nURL that the result page will go to after a successful transaction\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of\nPassThroughParameter\n\n    \nThis is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nThese are the list parameters mentioned above\n\n\nUrlParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter as it appeared in the URL.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter as it appeared in the URL.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe desired content of the parameter to be passed to Asperato.\n\n  \n\n  \n\n    \nIsDisplayOnly\n\n    \nBoolean\n\n    \nWhen true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again.\n\n  \n\n\n\n\n\nWhen implementing a service handler override class this new class should implement the interface called \nasp03__IGetPaymentsService\n.\n\n\nPutPayments\n\n\nThis puts data back into Salesforce after a payment attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.\n\n\nRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nPutPaymentRequestDetails\n\n    \nList of\nPutPaymentRequestDetail\n\n    \nA list of outcomes from payment attempts.\n\n  \n\n\n\n\n\nPutPaymentRequestDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted.\n\n  \n\n  \n\n    \nPaymentDate\n\n    \nDate\n\n    \nThe date the payment was attempted.\n\n  \n\n  \n\n    \nAmount\n\n    \nLong\n\n    \nAmount transacted in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc.\n\n  \n\n  \n\n    \nAddressCity\n\n    \nString\n\n    \nThe billing address city as entered on the paypage.\n\n  \n\n  \n\n    \nAddressCountry\n\n    \nString\n\n    \nThe billing address country as selected on the paypage.\n\n  \n\n  \n\n    \nAddressPostalCode\n\n    \nString\n\n    \nThe billing address postal code as entered on the paypage.\n\n  \n\n  \n\n    \nAddressState\n\n    \nString\n\n    \nThe billing address state/county as entered on the paypage.\n\n  \n\n  \n\n    \nAddressStreet\n\n    \nString\n\n    \nThe billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break.\n\n  \n\n  \n\n    \nAccountName\n\n    \nString\n\n    \nThe name on the card or the bank account\n\n  \n\n  \n\n    \nAccountReference\n\n    \nString\n\n    \nAn obscured reference to the card or the bank account.\n\n  \n\n  \n\n    \nCardType\n\n    \nString\n\n    \nIf a card this will say what type of card was used otherwise will say `Not Applicable`.\n\n  \n\n  \n\n    \nCrossReference\n\n    \nString\n\n    \nThe cross reference value obtained from the payment gateway.\n\n  \n\n  \n\n    \nCurrencyCode\n\n    \nString\n\n    \nThree character ISO 4217 currency code.\n\n  \n\n  \n\n    \nEmail\n\n    \nString\n\n    \nThe email address as entered on the paypage.\n\n  \n\n  \n\n    \nOrderId\n\n    \nString\n\n    \nAn Asperato generated order reference for the transaction.\n\n  \n\n  \n\n    \nPaymentRoute\n\n    \nString\n\n    \nOne of:\n      \n\n        \nCard\n\n        \nBACS\n\n        \neCheck\n\n        \nSEPA\n\n        \nWallet\n\n      \n\n    \n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nID of the payment object row\n\n  \n\n  \n\n    \nSource\n\n    \nString\n\n    \nHow the transaction was generated.  One of:\n      \n\n        \nHolder not present\n\n        \nRepeat\n\n        \nWeb\n\n      \n\n    \n\n  \n\n  \n\n    \nStatusDescription\n\n    \nString\n\n    \nText relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate.\n\n  \n\n  \n\n    \nPassThroughParameters\n\n    \nList of\nPassThroughParameter\n\n    \nThis is a list of name value pairs that were passed from Salesforce, updated in the paypage and then passed back to Salesforce.\n\n  \n\n\n\n\n\nPassThroughParameter\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nKey\n\n    \nString\n\n    \nThe name of the parameter passed from Asperato.\n\n  \n\n  \n\n    \nValue\n\n    \nString\n\n    \nThe content of the parameter passed from Asperato.\n\n  \n\n\n\n\n\nResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the overall request was successful.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nPutPaymentResponseDetails\n\n    \nList of \nPutPaymentResponseDetail\n\n    \n\n  \n\n\n\n\n\nPutPaymentResponseDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the request was successful for this row.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.\n\n  \n\n  \n\n    \nSalesforceId\n\n    \nString\n\n    \nThe ID of the row that was updated.\n\n  \n\n\n\n\n\nMessages\n\n\nThe message web service is used to send messages from Asperato to Salesforce.  These messages affect the status of existing payments or authorisations.\n\n\nAt the moment these messages all relate to UK Direct Debits, though in future this will include SEPA direct debits and card updates.\n\n\nThis web service can be bulked up so is capable of sending multiple rows in a single request.\n\n\nRequest\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nPutMessagesRequest\n\n    \nList of\nPutMessageRequestDetail\n\n    \nA list of messages.\n\n  \n\n\n\n\n\nPutMessageRequestDetail\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true means the message has a positive implication, when false indicates a failure of some sort.\n\n  \n\n  \n\n    \nEventReference\n\n    \nString\n\n    \nA unique reference to the message.\n\n  \n\n  \n\n    \nMessageText\n\n    \nString\n\n    \nTextural content of the message truncated to 250 characters so as not cause insert failures in the standard objects.\n\n  \n\n  \n\n    \nReasonCode\n\n    \nString\n\n    \nThe raw reason code from either BACS or SEPA\n\n  \n\n  \n\n    \nResource\n\n    \nString\n\n    \nCan be one of \n      \n\n        \nmandates\n\n        \npayments\n\n        \nrefunds\n\n        \nPayouts\n (not currently sent)\n\n        \nsubscriptions\n (not currently sent)\n\n      \n\n    \n\n  \n\n  \n\n    \nStatus\n\n    \nString\n\n    \nThe action that the message implies.  Typical values are created, active, cancelled, failed, etc.\n\n  \n\n  \n\n    \nTransactionReference\n\n    \nString\n\n    \nA reference needed to locate the item to which the message refers (see below)\n\n  \n\n\n\n\n\nLocating the data to which a message refers.\n\n\nWhen the resource has the text content \nmandates\n the message relates to an Authorisation.  To locate the correct row search for where the Repeat Cross Reference on the Authorisation row equals the TransactionReference on the request.\n\n\nWhen the resource has the text content of either \npayments\n or \nrefunds\n then the message relates to the Payment object.\n\n\nTo locate the correct row search for where the Cross Reference on the Payment row equals the TransactionReference on the request.\n\n\nResponse\n\n\n\n  \n\n    \nField Name\n\n    \nType\n\n    \nUsage\n\n  \n\n  \n\n    \nSuccess\n\n    \nBoolean\n\n    \nWhen true indicates that the overall request was successful.\n\n  \n\n  \n\n    \nErrorMessage\n\n    \nString\n\n    \nIf the Success field is false this indicates the reason why.", 
            "title": "Salesforce package"
        }, 
        {
            "location": "/sf/#salesforce-package", 
            "text": "The core package consists of three custom objects and a set of web services that communicate between Asperato and Salesforce.  The web services are all managed through Apex classes.  The package is designed to be extensible so that the package web service classes can be replaced by custom Apex code if that is required.    There are simple VisualForce pages to support each of the data objects and tabs accessing these are grouped together into an Asperato application.  The configuration of the package is managed via Custom Metadata.  There are two Metadata Types, Asperato Settings and Service Handler.  The options available for these settings are described below.", 
            "title": "Salesforce package"
        }, 
        {
            "location": "/sf/#installation", 
            "text": "The core package is installed using a Salesforce package deployment link.  For a sandbox organisation this link is:  https://test.salesforce.com/packaging/installPackage.apexp?p0=04t240000006Usj  For a live or development organisation this link is:  https://login.salesforce.com/packaging/installPackage.apexp?p0=04t240000006Usj  When installing make sure that the package is accessible by all Salesforce users (this is not the default). \nOnce the package has been installed you need to update the system Network Security so that the Asperato servers can communicate with your Salesforce organisation.\nAs a system administrator go to:  Setup   Administer   Security Controls   Network Access \nAdd the following Trusted IP Ranges:   Start IP Address: 77.68.42.36 \nEnd IP Address: 77.68.42.36 \nDescription: Asperato Test  Start IP Address: 162.13.56.213 \nEnd IP Address: 162.13.56.213 \nDescription: Asperato Live   You will need to obtain a reference code from Asperato.  This code is known as the  pmRef  and this needs to be recorded into a Custom Metadata object.\nOnce you have obtained the code from Asperato in Salesforce go to  Setup   Build   Develop   Custom Metadata Types \nIn the list that is displayed you will see \u2018Asperato Settings\u2019. \nClick on the \u2018Manage Records\u2019 link. \nOn the list that is then displayed \u2018Edit\u2019 the line with the label \u2018Default\u2019. \nChange the  pmRef  value to that supplied to you by Asperato and save the record.", 
            "title": "Installation"
        }, 
        {
            "location": "/sf/#design-overview", 
            "text": "", 
            "title": "Design overview"
        }, 
        {
            "location": "/sf/#the-web-journey", 
            "text": "The web journey is where a payment or an authorisation is set up via screens that require interaction from a paying person.  This is typically through links in a website, links sent in email communications or direct from Salesforce via a button or a link.  The journey starts with a URL that invokes an Asperato program.  The URL will contain at least one parameter ( pmRef ) and might have several more.  This are described more fully elsewhere.  The parameters are used to: \n  * Obtain configuration from Asperato using the  pmRef  parameter. \n  * Obtain data from Salesforce using either the GetAuthorisations REST webservice or the GetPayments REST webservice.  The requests and responses for these services are described fully elsewhere in this documentation.  The Asperato program combines the configuration and the data to create a dynamic web screen that is then displayed to the person making the payment in a web browser. \nThe payer then enters data to the web screen and control then passes to another Asperato program. \nThis second program accepts and validates the data input and then calls the relevant payment gateway. \nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments. \nAsperato then displays the outcome of the whole transaction on either a success or a fail screen.", 
            "title": "The web journey"
        }, 
        {
            "location": "/sf/#the-automatic-repeat-payment-journey", 
            "text": "The automatic payment journey is the process by which a payment can be taken without the need for screen input on behalf of the payer based on an authorisation that has already been put in place.  This authorisation is typically a Direct Debit mandate or a card continuous payment authority.  The journey starts in Salesforce where suitable code creates a list of payments that are due for collection.   \nThis list of payments is then sent to Asperato using a REST web service. \nAsperato then applies validation to each line in the list and either accepts or rejects the individual request line. \nFor those lines that are accepted Asperato calls the relevant gateway.  \nThe gateway then returns a response and this is passed back to Salesforce using either or both of the REST webservices PutAuthorisations and PutPayments.", 
            "title": "The automatic (repeat) payment journey"
        }, 
        {
            "location": "/sf/#terminology", 
            "text": "In Asperato terms an Authorisation is a record of an authority given by a payer to collect automatic payments.  This will take the physical form of either a Direct Debit mandate or a card Continuous Payment Authorisation (CPA).  Creating an authority does not take money from the associated account, it merely sets up the mechanism to allow that to happen in the future.  There are rules in force about what you have to tell the payer when you set up an authority and when you take payments using it.  Those rules vary depending on the payment route you are using.  A Payment is a financial transaction.  This can include a refund. Its key attributes are that is has an amount, currency, a due date and a payment route.  In Asperato terms an Automatic or Repeat payment is defined as where: \nThe payment frequency is not \u2018Single\u2019. \nThe payment frequency is \u2018Single\u2019 but the payment due date is in the future. \nThe payment route is either BACS or SEPA since these require authorisations even for one off payments", 
            "title": "Terminology"
        }, 
        {
            "location": "/sf/#payment-scenarios", 
            "text": "Basic actions on the data in Salesforce:\n(a) Create new Authorisation row \n(b) Update existing Authorisation row \n(c) Create a new Payment row \n(d) Update an existing Payment row  These are the data scenarios that the package is designed to deal with: \n   \n     Scenario \n     Action \n   \n   \n     New authority where no data currently exists \n     (a) \n   \n   \n     New authority where an Authorisation row already exists \n     (b) \n   \n   \n     Update to an existing authority \n     (b) \n   \n   \n     Single payment where no data currently exists \n     (c) \n   \n   \n     Single payment where a Payment row already exists \n     (d) \n   \n   \n     Repeat payment where where no data currently exists on either Authorisation or Payment \n     (a) + (c) \n   \n   \n     Repeat payment where where no data currently exists on Payment but an Authorisation exists \n     (b) + (c) \n   \n   \n     Repeat payment where where data exists on Payment but no Authorisation exists \n     (a) + (d) \n   \n   \n     Repeat payment where where rows exist on both Authorisation and Payment \n     (b) + (d) \n   \n   \n     Subsequent repeat payment (i.e. an automatic payment) \n     (b) + (d)", 
            "title": "Payment scenarios"
        }, 
        {
            "location": "/sf/#the-data-objects", 
            "text": "The package data objects are called  Payment ,  Subscription  and  Authorisation  and they are related to each other as per the diagram below.", 
            "title": "The data objects"
        }, 
        {
            "location": "/sf/#authorisation", 
            "text": "Authorisation contains data relating to an authority to collect payments.  This can take the form of either a Direct Debit mandate or a card continuous payment authority.  The fields and their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Account Name \n     Records the name on the bank account or the cardholder name for future reference. \n   \n   \n     Account Reference \n     A partially obscured record of the bank account or credit card number for future reference. \n   \n   \n     Billing Address City \n     Records the city in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Country \n     Records the country in the billing address that was captured on the payment page. \n   \n   \n     Billing Address PostalCode \n     Records the postal code in the billing address that was captured on the payment page. \n   \n   \n     Billing Address State \n     Records the state/county in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Street \n     Records the street(s) in the billing address that was captured on the payment page. \n   \n   \n     Card Type \n     The type of credit or debit card, or `Not Applicable` for the other Authorisation Types. \n   \n   \n     CPA Granted \n     Indicates that the customer has given permission for card details to be used to collect automatic payments. \n   \n   \n     Email \n     Records the email address that was captured on the payment page. \n   \n   \n     Expiry Date \n     The date on the which the authorisation will expire (if applicable). \n   \n   \n     Mandate Reference \n     The reference for a Direct Debit mandate that will need to be displayed to the end customer in emails and other communication. \n   \n   \n     Payment Route \n     One of:\n       \n         Card  Credit or debit card \n         BACS  UK Direct Debit \n         eCheck    US Bank payment \n         SEPA  European Direct Debit \n         Wallet  PayPal, etc. \n       \n     \n   \n   \n     Repeat Cross Reference \n     One of a pair of fields needed to make a repeat payment request. \n   \n   \n     Repeat Order ID \n     One of a pair of fields needed to make a repeat payment request. \n   \n   \n     Status \n     The status of the authorisation.  Can be one of:\n       \n         Pending  Has been created but is not yet active \n         In Force  In force and ready to use \n         Cancelled  Has been stopped \n         Failed  Has failed for some reason \n       \n     \n   \n   \n     Status Description \n     A descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example.", 
            "title": "Authorisation"
        }, 
        {
            "location": "/sf/#subscription", 
            "text": "Subscription contains the information needed to drive the creation of payments where they need to recur automatically.  Subscription has a lookup relationship with Authorisation.  The fields are their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Authorisation \n     A link to the related Authorisation object.  A subscription must have and entry here in order to process a payment. \n   \n   \n     Authorisation Status \n     A formula reflecting the status of the associated Authorisation. \n   \n   \n     Day of the Month \n     The day of the month on which the subscription payment should be taken. \n   \n   \n     Frequency \n     The payment frequency for the subscription. \n   \n   \n     Last Payment Date \n     The date on which the subscription payment request was last raised. \n   \n   \n     Next Payment Date \n     The date on which the next payment request will be raised. \n   \n   \n     Payment Route \n     A formula reflecting the payment route of the associated Authorisation. \n   \n   \n     Regular Amount \n     The amount of the subscription charge.  The currency will be determined based on the currency of the Subscription record in a multi-currency org or from the org default currency for a single currency org. \n   \n   \n     Start Date \n     Date of which the subscription come into force. \n   \n   \n     Status \n     The status of the subscription.  Can be one of:\n       \n         In Force  In force and ready to use \n         Cancelled  Has been stopped \n       \n     \n   \n   \n     Status Description \n     A descriptive text showing the reason related to the current status.  Might contain the reason for cancellation for example.", 
            "title": "Subscription"
        }, 
        {
            "location": "/sf/#payment", 
            "text": "Payment contains both the request for a payment to occur and also the response once it has been processed.  Payment has a lookup relationship to both Authorisation and Subscription.  The fields are their usage are described below:   \n   \n     Field \n     Usage \n   \n   \n     Account Name \n     Records the name on the bank account or the cardholder name for future reference. \n   \n   \n     Account Reference \n     A partially obscured record of the bank account or credit card number for future reference. \n   \n   \n     Amount \n     The amount of the payment.  Will contain either the requested amount of the amount actually collected depending on the status of the payment. \n   \n   \n     Authorisation \n     A link to the related Authorisation object if appropriate. \n   \n   \n     Billing Address City \n     Records the city in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Country \n     Records the country in the billing address that was captured on the payment page. \n   \n   \n     Billing Address PostalCode \n     Records the postal code in the billing address that was captured on the payment page. \n   \n   \n     Billing Address State \n     Records the state/county in the billing address that was captured on the payment page. \n   \n   \n     Billing Address Street \n     Records the street(s) in the billing address that was captured on the payment page. \n   \n   \n     Card Type \n     The type of credit or debit card, or `Not Applicable` for the other Payment Types \n   \n   \n     Cross Reference \n     A reference to the payment generated by the payment gateway. \n   \n   \n     Email \n     Records the email address that was captured on the payment page. \n   \n   \n     Frequency \n     A formula reflecting the payment frequency from the associated subscription if appropriate. \n   \n   \n     Order ID \n     A unique reference to the payment transaction generated by Asperato and reflected through to the payment gateway. \n   \n   \n     Original Payment \n     A way of cross relating payments, for example where one transaction is a refund of another. \n   \n   \n     Payment Date \n     The date on which the payment was made. \n   \n   \n     Payment Route \n     One of:\n       \n         Card  Credit or debit card \n         BACS  UK Direct Debit \n         eCheck  US Bank payment \n         SEPA  European Direct Debit \n         Wallet  PayPal, etc. \n       \n     \n   \n   \n     Scheduled Date \n     Date on which a payment is scheduled to be processed.  Can be used to set up payments that are due in the future. \n   \n   \n     Sent Date \n     Date on which an automatic payment was sent to Asperato for processing. \n   \n   \n     Source \n     Payment source.  Can be one of: Web  Holder not present  Repeat \n   \n   \n     Status \n     The status of the payment.  Can be one of:\n       \n         Pending  Has been created but is not yet active \n         Sent  Has been set to Asperato for processing. \n         Paid  Has been paid. \n         Refunded  Has been refunded. \n         Failed  Has failed for some reason \n         Payment Scheduled  Is ready for collection by the next batch run. \n       \n     \n   \n   \n     Status Description \n     A descriptive text showing the reason related to the current status.  Might contain the reason for cancellation or failure for example. \n   \n   \n     Subscription \n     A link to the related Subscription record if appropriate. \n   \n   \n     Type \n     One of:\n       \n         Payment \n         Refund", 
            "title": "Payment"
        }, 
        {
            "location": "/sf/#the-custom-metadata-type-settings", 
            "text": "There are two Custom Metadata Types that affect the way that the Asperato Phoenix package operates.", 
            "title": "The Custom Metadata Type settings"
        }, 
        {
            "location": "/sf/#asperato-settings", 
            "text": "There is a single record in this Metadata Type with the Label of Default.  When managing this record there are three fields available.  The first of these field is labeled  pmRef .  The value for this field is provided by Asperato and relates the Salesforce organisation to the equivalent configurations within the Asperato databases.  You must set this value before using the package to take payments etc.  The second field is labeled  Operating Mode .  This is a select box with two options, Test and Live.  Switching this value will automatically switch Asperato server endpoints between the sandbox test environment and the live server environment.  Leave this setting as  Test  until such time as the live configuration has been established with Asperato.  The third field is labelled  Direct Debit Lead Time .  This is a numeric field with a default value of 4 and this represents the number of days before a payment is due that the process of collecting that payment will start.  This is to compensation for the inherent delays in the UK BACS payment system.  This value can be tuned if needed. Under normal circumstances you should leave this value at the default.", 
            "title": "Asperato Settings"
        }, 
        {
            "location": "/sf/#service-handlers", 
            "text": "There are five records in the Service Handlers Metadata Type and these are used to implement overrides to standard package service handlers.  A service handler is an Apex class that processes the data provided in a web service call and builds the appropriate response.  The full details for each of the web services available and how to create the Apex needed is described in the Web Services section.  The only field you can edit for each record is the Handler Name.  This is the name of the Apex class that will be executed for the relevant handler.  The complete list of the Service Handlers and their default values is shown in the table below.  The Interface Name is the name of the interface that the service handler implements.  \n   \n     Label \n     Default Handler \n     Interface Name \n   \n   \n     GetAuthorisations \n     GetAuthorisationsService \n     IGetAuthorisationsService \n   \n   \n     GetPayments \n     GetPaymentsService \n     IGetPaymentsService \n   \n   \n     PutAuthorisations \n     PutAuthorisationsService \n     IPutAuthorisationsService \n   \n   \n     PutMessages \n     PutMessagesService \n     IPutMessagesService \n   \n   \n     PutPayments \n     PutPaymentsService \n     IPutPaymentsService", 
            "title": "Service Handlers"
        }, 
        {
            "location": "/sf/#web-services", 
            "text": "Each web service consists of an Apex REST endpoint and an associated Apex class that processes the REST request object and builds the relevant response object.  The Apex class that processes the REST data exchange is called a service handler and the actual name of the service handler is driven by Custom Metadata.  So in simple terms to create a new Apex service handler you create a new Apex class that implements the relevant interface and update the Custom Metadata to point to the new class.  Next time that the web service fires, the service handler that executes would be your code rather than that supplied by the Asperato Phoenix package.  There are three sets of web services relating to payments, authorisations and message updates.", 
            "title": "Web Services"
        }, 
        {
            "location": "/sf/#payments", 
            "text": "The two web services that relate to payments are labelled  GetPayments  and  PutPayments .", 
            "title": "Payments"
        }, 
        {
            "location": "/sf/#getpayments", 
            "text": "This gets data from the Payment object and passes this to Asperato so that it can be used to prepopulate the payment page web screen.  The web service has a simple request of a single Salesforce ID and returns a single set of response data.  The field names and usage are shown in the table below.  Request  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     RecordID \n     String (ID) \n     Contains the Salesforce ID to a row in the payment object. \n   \n   \n     UrlParameters \n     List of\nUrlParameter \n     Any additional parameters included into the URL that invokes the Asperato pay page are passed to Salesforce in this list. \n     Response  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means the record was located correctly. If this is set to false it will cause the standard Asperato paypage template to output the message \"Sorry, the payment cannot be taken at this time.\" \n   \n   \n     UseHostedPage \n     Boolean \n     When true means that where a gateway offers a hosted page option that will be invoked in preference to the Asperato template. \n   \n   \n     DueDate \n     Date \n     The date on which the payment is due. \n   \n   \n     Amount \n     Long \n     Amount due in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     This will be used to provide a default value for the billing address city on the paypage. \n   \n   \n     AddressCountry \n     String \n     This will be used to provide a default value for the billing address country on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     This will be used to provide a default value for the billing postal code on the paypage. \n   \n   \n     AddressState \n     String \n     This will be used to provide a default value for the billing address state/county on the paypage. \n   \n   \n     AddressStreet \n     String \n     This will be used to provide a default value for the billing address streets on the paypage.  The Salesforce street address text area will be split so that the first line will appear in the first address line onn the screen and the rest of the block will appear in the second address line with the line feeds replaced by a comma \n   \n   \n     CompanyName \n     String \n     This will be used to provide a default value for the company name on the paypage. \n   \n   \n     CurrencyCode \n     String \n     Three character ISO 4217 currency code. \n   \n   \n     Email \n     String \n     This will be used to provide a default value for the email address on the paypage. \n   \n   \n     FirstName \n     String \n     This will be used to provide a default value for the first name on the paypage. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this will contain an indication of why the call failed. \n   \n   \n     LastName \n     String \n     This will be used to provide a default value for the last name on the paypage. \n   \n   \n     PaymentFrequency \n     String \n     One of:\n       \n         Single \n         Daily \n         Weekly \n         Monthly \n         Quarterly \n         Semi-annual \n         Annual \n       \n     \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         BACS \n         eCheck \n         SEPA \n         Wallet \n       \n     \n   \n   \n     SalesforceId \n     String \n     The Salesforce ID of the payment object row to which the request relates. \n   \n   \n     UrlCancel \n     String \n     URL that the payment page will link to if the end customer chooses to cancel the payment process. \n   \n   \n     UrlError \n     String \n     URL that the result page will go to in the event that the transaction fails \n   \n   \n     UrlExit \n     String \n     URL that the result page will go to after a successful transaction \n   \n   \n     PassThroughParameters \n     List of\nPassThroughParameter \n     This is a list of name value pairs that can be passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     These are the list parameters mentioned above  UrlParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter as it appeared in the URL. \n   \n   \n     Value \n     String \n     The content of the parameter as it appeared in the URL. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The desired name of the parameter to be passed to Asperato.\nNote that there are certain names that have significance to the web templates and these are documented in the templates chapter. \n   \n   \n     Value \n     String \n     The desired content of the parameter to be passed to Asperato. \n   \n   \n     IsDisplayOnly \n     Boolean \n     When true the parameter will appear in the template and not be passed back to Salesforce.\nBy default all parameters are passed into Asperato and back out again. \n     When implementing a service handler override class this new class should implement the interface called  asp03__IGetPaymentsService .", 
            "title": "GetPayments"
        }, 
        {
            "location": "/sf/#putpayments", 
            "text": "This puts data back into Salesforce after a payment attempt has been made irrespective of whether that attempt succeeded or failed.  This web service can be bulked up so is capable of sending multiple rows in a single request.  Request  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     PutPaymentRequestDetails \n     List of\nPutPaymentRequestDetail \n     A list of outcomes from payment attempts. \n     PutPaymentRequestDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means that the request to the gateway was processed successfully.  When false indicates that the transaction did not succeed and either no payment was taken or the authorisation request was not accepted. \n   \n   \n     PaymentDate \n     Date \n     The date the payment was attempted. \n   \n   \n     Amount \n     Long \n     Amount transacted in the lowest denomination for the the currency. For GBP this would be pence, for USD this would be cents, for EUR this would be cents, etc. \n   \n   \n     AddressCity \n     String \n     The billing address city as entered on the paypage. \n   \n   \n     AddressCountry \n     String \n     The billing address country as selected on the paypage. \n   \n   \n     AddressPostalCode \n     String \n     The billing address postal code as entered on the paypage. \n   \n   \n     AddressState \n     String \n     The billing address state/county as entered on the paypage. \n   \n   \n     AddressStreet \n     String \n     The billing address street as entered on the paypage. This will consist of the content of the address line 1 followed by the content of the address line 2 separated by a line break. \n   \n   \n     AccountName \n     String \n     The name on the card or the bank account \n   \n   \n     AccountReference \n     String \n     An obscured reference to the card or the bank account. \n   \n   \n     CardType \n     String \n     If a card this will say what type of card was used otherwise will say `Not Applicable`. \n   \n   \n     CrossReference \n     String \n     The cross reference value obtained from the payment gateway. \n   \n   \n     CurrencyCode \n     String \n     Three character ISO 4217 currency code. \n   \n   \n     Email \n     String \n     The email address as entered on the paypage. \n   \n   \n     OrderId \n     String \n     An Asperato generated order reference for the transaction. \n   \n   \n     PaymentRoute \n     String \n     One of:\n       \n         Card \n         BACS \n         eCheck \n         SEPA \n         Wallet \n       \n     \n   \n   \n     SalesforceId \n     String \n     ID of the payment object row \n   \n   \n     Source \n     String \n     How the transaction was generated.  One of:\n       \n         Holder not present \n         Repeat \n         Web \n       \n     \n   \n   \n     StatusDescription \n     String \n     Text relating to the transaction.  If present, this will show either some form of transaction reference or the reason why the payment failed as appropriate. \n   \n   \n     PassThroughParameters \n     List of\nPassThroughParameter \n     This is a list of name value pairs that were passed from Salesforce, updated in the paypage and then passed back to Salesforce. \n     PassThroughParameter  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Key \n     String \n     The name of the parameter passed from Asperato. \n   \n   \n     Value \n     String \n     The content of the parameter passed from Asperato. \n     Response  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the overall request was successful. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     PutPaymentResponseDetails \n     List of \nPutPaymentResponseDetail \n     \n     PutPaymentResponseDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the request was successful for this row. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why. \n   \n   \n     SalesforceId \n     String \n     The ID of the row that was updated.", 
            "title": "PutPayments"
        }, 
        {
            "location": "/sf/#messages", 
            "text": "The message web service is used to send messages from Asperato to Salesforce.  These messages affect the status of existing payments or authorisations.  At the moment these messages all relate to UK Direct Debits, though in future this will include SEPA direct debits and card updates.  This web service can be bulked up so is capable of sending multiple rows in a single request.  Request  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     PutMessagesRequest \n     List of\nPutMessageRequestDetail \n     A list of messages. \n     PutMessageRequestDetail  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true means the message has a positive implication, when false indicates a failure of some sort. \n   \n   \n     EventReference \n     String \n     A unique reference to the message. \n   \n   \n     MessageText \n     String \n     Textural content of the message truncated to 250 characters so as not cause insert failures in the standard objects. \n   \n   \n     ReasonCode \n     String \n     The raw reason code from either BACS or SEPA \n   \n   \n     Resource \n     String \n     Can be one of \n       \n         mandates \n         payments \n         refunds \n         Payouts  (not currently sent) \n         subscriptions  (not currently sent) \n       \n     \n   \n   \n     Status \n     String \n     The action that the message implies.  Typical values are created, active, cancelled, failed, etc. \n   \n   \n     TransactionReference \n     String \n     A reference needed to locate the item to which the message refers (see below) \n     Locating the data to which a message refers.  When the resource has the text content  mandates  the message relates to an Authorisation.  To locate the correct row search for where the Repeat Cross Reference on the Authorisation row equals the TransactionReference on the request.  When the resource has the text content of either  payments  or  refunds  then the message relates to the Payment object.  To locate the correct row search for where the Cross Reference on the Payment row equals the TransactionReference on the request.  Response  \n   \n     Field Name \n     Type \n     Usage \n   \n   \n     Success \n     Boolean \n     When true indicates that the overall request was successful. \n   \n   \n     ErrorMessage \n     String \n     If the Success field is false this indicates the reason why.", 
            "title": "Messages"
        }, 
        {
            "location": "/templates/", 
            "text": "Payment template\n\n\nThe standard payment template is provided by Asperato and will look similar to the following:\n\n\n\n\nTo obtain a copy of the standard paypage for modification, please email support@asperato.com. Most users only wish to make a few standard modifications to the template - this is the recommended approach. However, it is possible to complete redesign the template if required.\n\n\nStandard modifications\n\n\n\n\n\n\nChanging the company name\n\nOpen \nstyle.css\n, and find the following section:\n\n\n.companyname::before {\n    content: \"MyCompany\";\n}\n\n\n\nChange the content to your own company name.\n\n\nIf you are using GoCardless Pro, and have your own SUN, then you also need to find and change the following sections:\n\n\n.ddcompanyname::before {\n    /* Change this to your company name */\n    content: \"GoCardless Ltd\";\n}\n\n.creditorid::before {\n    /* Change this to your creditor id (only required if using SEPA direct debit) */\n    content: \"GB18ZZZSDDRB0S00275069\";\n}\n\n.ddcompanyaddress::before {\n    /* Change this to your company address, telephone number and email address respectively */\n    content: \"338-346 Goswell Road, London, EC1V 7LQ, United Kingdom, 020 7183 8674, help@gocardless.com\";\n}\n\n\n\nIf you are using GoCardless standard, you must leave these fields as they are. If you are not using direct debit, you can ignore these.\n\n\n\n\n\n\nChanging the logo\n\nJust replace the \nlogo.png\n file in the template directory with one of your own. The recommended size is \n380x120\n, but you can experiment to find a size that works well.\n\n\n\n\n\n\nChanging the font\n\nOpen \nstyle.css\n, and find the following section:\n\n\nbody {\n    margin: 0;\n    text-align: center;\n    background-color: white;\n    font-family: karla;\n}\n\n\n\nChange \nkarla\n to whatever font family you wish to use on the template.\n\n\n\n\n\n\nChanging the background colour\n\nAs above, Open \nstyle.css\n, and find the following section:\n\n\nbody {\n    margin: 0;\n    text-align: center;\n    background-color: white;\n    font-family: karla;\n}\n\n\n\nChange \nwhite\n to whatever background colour you wish to use on the template.\n\n\n\n\n\n\nChanging the submit button colour\n\nOpen \nstyle.css\n, and find the following section:\n\n\n.submitbutton {\n    ...\n    background-color: #5092DA;\n    ...\n}\n\n\n\nChange \n#5092DA\n to whatever background colour you wish to use for the submit button.\n\n\n\n\n\n\nRemoving the cancel link\n\nOpen \nstyle.css\n, and find the following section:\n\n\n .cancelbutton {\n     /* Uncomment if a cancel button isn't required on the payment page */\n     /*display: none;*/\n }\n\n\n\nUncomment the \ndisplay: none;\n as directed (remove the \n/*\n and \n*/\n either side.)\n\n\n\n\n\n\nRemoving the \"pay as company\" link\n\nOpen \nstyle.css\n, and find the following section:\n\n\n.label.right.payascompanylink {\n    /* Uncomment to hide the \"pay as company\" link */\n    /*display: none;*/\n}\n\n\n\nUncomment the \ndisplay: none;\n as directed (remove the \n/*\n and \n*/\n either side.)\n\n\n\n\n\n\nExtensive modifications\n\n\nThe paypage as provided can be modified to provide it with an entirely custom look - both the HTML markup and the CSS may be changed.\n\n\nHowever, extensively modifying the template can be a lot of work, and you can end up needing to re-implement many of the features the original template provides:\n\n\n\n\nJavascript based card type identification from number (IIN range checker)\n\n\nStart date and issue number fields dynamically displayed (based on card number) when required\n\n\nValidation of user input, including Luhn algorithm on card number\n\n\nThird party validation of bank details prior to submission (via Ajax)\n\n\nUK postcode lookup\n\n\nResponsive to mobile devices\n\n\nPayment options set dynamically within Salesforce (Card, Direct debit or Paypal)\n\n\nCan switch between taking a payment or updating an authorisation\n\n\nFully compatible with all modern browsers\n\n\n\n\nAsperato are unable to provide support for templates with extensive modifications.\n\n\nIf you do choose to extensively modify the payment page, then you must read this document thoroughly and adhere to the guidelines.\n\n\nWhen your modifications are complete, you must \nvalidate the document\n. Unless there is a very good reason, \nAsperato will not allow invalid HTML to be used on payment pages.\n\n\nID / class attributes\n\n\nWhen modifying the document, please keep the class and ID attributes that are already present, as changing them will break form submission and validation. (Additional class names may be used.)\n\n\nAdditional JS\n\n\nAdditional Javascript is fine, but please place it in a separate file (where possible) rather than altering the provided \"script.js\" file. We need to manually check the Javascript to make sure it is not malicious in any way, so placing it in a separate file will speed up this process.\n\n\nEndpoint \n Method\n\n\n\n\n\n\nThe method must be \nPOST\n. Other HTTP methods (such as \nGET\n) are not supported.\n\n\n\n\n\n\nThe endpoint (action parameter) must either be \n/PMWeb2\n, or \n/PMWeb2X\n.\n\n\n\n\n\n\nPMWeb2X\n will display a gear animation while the payment is processing, but cannot be used with a hosted payment option (such as GoCardless standard or Paypal);\n\n\n\n\n\n\nPMWeb2\n will not display the gear animation.\n\n\n\n\n\n\n\n\n\n\nOnload Javascript\n\n\nImmediately after the opening body tag, the following must be left in place:\n\n\n!-- ONLOAD HERE --\n\n\nThis will provide a hook for injecting the Javascript we need to dynamically modify the paypage (based on data collected from Salesforce.)\n\n\nPostcode lookup\n\n\nYou may wish to include a postcode lookup in your page - we have this facility available as a simple JSON endpoint to which you can fire an AJAX request.\n\n\nEndpoint:\n \n/Asperato/asp/PMPostcode\n\n\n\n\n\n\nThis will be \nhttps://test.protectedpayments.net/Asperato/asp/PMPostcode\n for test and \nhttps://live.protectedpayments.net/Asperato/asp/PMPostcode\n for live.\n\n\n\n\n\n\nDo not specify the full URL in your Javascript, as the same origin policy will then break the functionality when moving from test to live.\n\n\n\n\n\n\nMethod: \nGET\n\n\nParameters:\n\n\n\n\n\n\npc\n - this is the postcode to look up. It should be all in lower case and contain no spaces.\n\n\n\n\n\n\nsession\n - this is the value of the \nDLsession\n parameter on the form.\n\n\n\n\n\n\nThe response will be given as a JSON array.\n\n\nFor example:\n\n\n\n\nGET\n \nhttps://test.protectedpayments.net/Asperato/asp/PMPostcode?pc=HD80pq\nsession=1133557799\n\n\n\n\nResponse:\n\n\n[\"22 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"24 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"24a Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"26a Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"28 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"30 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"32 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"Shepley Springs Ltd, Brookfield Mills, Penistone Road, , Kirkburton, Huddersfield, West Yorkshire\",\"Spring Grove Fisheries, 26 Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\",\"Spring Grove Tavern, 20 Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\",\"The Foxglove, 36a Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\"]\n\n\nThe response can then be used to fill a HTML selection box or similar, and the selected value can be used to populate the required fields on the form.\n\n\nField names\n\n\nIn all cases here, both the \nid\n and \nname\n attributes of the element must be set to the name given. The attribute value is case sensitive.\n\n\nTaking \nDLemail\n as an example:\n\n\ninput type=\"text\" name=\"DLemail\" id=\"DLemail\"\n\n\nRequired fields\n\n\nThe following fields must be specified on the form regardless of payment method or type:\n\n\nDLsession\n\n\nThis is an internally generated session number \n(this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)\n\n\nDLpayMode\n\n\nThis is an internally generated session number \n(this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)\n\n\nDLpayType\n\n\nThis is an internally generated session number \n(this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)\n\n\nDLFrequency\n\n\nThe frequency of payment. You may wish to restrict the values to those provided in the \"LabelFrequencyOptions\" field.\n\n\nPossible values:\n\n\n\n\nONE\n (single payment)\n\n\nDLY\n (daily payment)\n\n\nWKL\n (weekly payment)\n\n\nMON\n (monthly payment)\n\n\nQTL\n (quarterly payment)\n\n\nSAN\n (semi-annual payment)\n\n\nANN\n (annual payment)\n\n\n\n\nDLamount\n\n\nThe amount to charge. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.\n\n\nDLauthAmount\n\n\nThe amount to authorise. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.\n\n\nDLemail\n\n\nThe email address of the customer.\n\n\nLabelFrequencyOptions\n\n\nThe frequency options passed from Salesforce. \n(this field should be set to \"type=hidden\" and will be automatically populated from Salesforce. Its \u201cid\u201d attribute must also match the field name.)\n\n\nLabelPaymentOptions\n\n\nThe payment options passed from Salesforce \n(this field should be set to \"type=hidden\" and will be automatically populated from Salesforce. Its \u201cid\u201d attribute must also match the field name.)\n\n\nYou may wish to use this field to restrict the payment options - i.e. hide the option to pay via direct debit if it is set to \"card\" or vica versa.\n\n\nRequired card fields\n\n\nThe following fields must (only) be specified if a debit or credit card payment is being made.\n\n\nDLcardNumber\n\n\nThe long number on the front of the card.\n\n\nDLcardType\n\n\nPossible values:\n\n\n\n\n\n\nVisa\n\n\n\n\n\n\nMastercard\n\n\n\n\n\n\nAmex\n\n\n\n\n\n\nSolo\n\n\n\n\n\n\nSwitch\n\n\n\n\n\n\nMaestro\n\n\n\n\n\n\nJCB\n\n\n\n\n\n\nDLcnp\n\n\nSet to \"jdi\" if cardholder is not present, otherwise do not specify this parameter.\n\n\nDLcurrency\n\n\nThe ISO currency code, eg. \"GBP\" for British pounds.\n\n\nDLexpiryDateMonth\n\n\nThe two digit expiry date month of the card.\n\n\nDLexpiryDateYear\n\n\nThe last two digits of the year the card expires.\n\n\nDLcv2\n\n\nThe 3 digit security code on the back of the card (or the 4 digit code on the top right of the card for Amex.)\n\n\nOptional card fields\n\n\nThese fields may be required - they are not for the majority of cards, but some (such as Solo, Maestro and Switch) may need them, so if you expect customers to pay with these cards they should be included.\n\n\nDLstartDateMonth\n\n\nThe two digit start date month of the card\n\n\nDLstartDateYear\n\n\nThe last two digits of the start date year.\n\n\nDLissueNumber\n\n\nThe issue number of the card (often \"01\" where it exists.)\n\n\nRequired Direct Debit / ACH fields\n\n\nThese fields are only required if making a direct debit or ACH payment.\n\n\nDLaccountName\n\n\nThe full name of the account holder.\n\n\nDLaccountNumber\n\n\nThe bank account number.\n\n\nDLsc\n\n\nThe sort code (direct debit) or routing number (ACH).\n\n\nDLaccountType\n\n\nOnly necessary for ACH - the account type. Usually \"checking\" or \u201csavings\u201d.\n\n\nAddress fields\n\n\nIf AVS (address) checking is enabled on your card gateway, then you will need some of these fields. The exact fields you require depends on your gateway settings, but often just the first line of the address (\nDLaddress1\n) and the postcode (\nDLpostcode\n) are required.\n\n\nFor direct debit and ACH payments, the title, forename, lastname, first line of the address, city and postcode are always required.\n\n\nDLtitle\n\n\nThe salutation or title.\n\n\nDLforename\n\n\nThe first name.\n\n\nDLlastname\n\n\nThe last name.\n\n\nDLaddress1\n\n\nThe first line of the address.\n\n\nDLaddress2\n\n\nThe second line of the address.\n\n\nDLcity\n\n\nThe town or city of the address\n\n\nDLcounty\n\n\nThe county or state of the address\n\n\nDLcountry\n\n\nThe country of the address\n\n\nDLpostcode\n\n\nThe postcode, or zip code of the address.\n\n\nPre-populating the template\n\n\nThe template will be pre-populated with values for the above parameters if values are provided as part of the URL string.\n\n\nFor example, if the normal URL to the payment page is:\n\n\nhttps://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73\ncampaignRef=431\n\n\nThen the email can be pre-populated with the following URL:\n\n\nhttps://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73\ncampaignRef=431\nDLemail=test@asperato.com\n\n\nDirect Debit Legal Requirements\n\n\nWhile the look and feel of both the payment and exit screens can be changed, the following rules must be adhered to if UK direct debit or SEPA payments are being used. These requirements are mandatory and non-negotiable as they are required under UK law.\n\n\nThe example payment page template includes all these requirements, so if you are just modifying the colours, fonts, and logo in use then you need not worry about the contents of this document. If you are developing a template with a radically different look and feel, we will need to send these to GoCardless for verification before they can be used live (this process can typically take a couple of weeks, depending on how many changes are required.)\n\n\nPayment page requirements\n\n\nAccount name field must be called \u201cAccount name\u201d\n\nThe label for the account name field must not be changed - it must also be presented in a logical block next to the account number and sort code. (In particular, it cannot be changed just to \u201cname\u201d.)\n\n\nRetain confirmation that only one user is required to authorise payments.\n\nThe check box that asks whether multiple signatures are needed to set up a direct debit on this account must be retained.\n\n\nConfirm customer details before submission.\n\nThe customer\u2019s bank account details (including account name, account number and sort code) must be relayed back to the customer in a confirmation dialog, with the opportunity to amend these details, before the form is submitted.\n\n\nProvide your contact details\n\nYou need to provide the name, address, phone number and email address of your payment provider somewhere on the payment page, usually in the footer. Note that if you are using GoCardless standard, this needs to be kept as GoCardless\u2019 details (included in the sample template.) If you are using GoCardless Pro with your own SUN, then these need to be your own details.\n\n\nInclude a link to the direct debit guarantee\n\nA link must be clearly visible on the page that points to the direct debit guarantee - the wording of the guarantee needs to stay exactly as it is in the sample template, aside from swapping out the company name. As previously, this needs to be left as GoCardless if GoCardless standard is being used, and changed to your company name if you are using GoCardless Pro with your own SUN.\n\n\nConfirmation page requirements\n\n\nShow confirmation of setup\n\nConfirmation that the direct debit was set up correctly must be displayed.\n\n\nProvide the mandate as a PDF link\n\nYou need to provide a link to the Direct Debit mandate as a PDF.\n\n\nConfirm that the customer will receive an email\n\nYou need to send the customer an email confirming that the direct debit was setup successfully, along with a link to their mandate (as above.) You need to state that this email will arrive in 3 business days.\n\n\nConfirm the name on the customer\u2019s bank statement\n\nYou need to include \u201cThe name on your bank statement will be X\u201d on your confirmation page. X will be \u201cGoCardless\u201d for GoCardless standard customers, and your company name for GoCardless Pro customers using their own SUN.\n\n\nError page requirements\n\n\nConfirm that the Direct Debit was not set up\n\nConfirm to the user that an error occurred, and as a result the direct debit was not set up correctly.", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#payment-template", 
            "text": "The standard payment template is provided by Asperato and will look similar to the following:   To obtain a copy of the standard paypage for modification, please email support@asperato.com. Most users only wish to make a few standard modifications to the template - this is the recommended approach. However, it is possible to complete redesign the template if required.", 
            "title": "Payment template"
        }, 
        {
            "location": "/templates/#standard-modifications", 
            "text": "Changing the company name \nOpen  style.css , and find the following section:  .companyname::before {\n    content: \"MyCompany\";\n}  Change the content to your own company name.  If you are using GoCardless Pro, and have your own SUN, then you also need to find and change the following sections:  .ddcompanyname::before {\n    /* Change this to your company name */\n    content: \"GoCardless Ltd\";\n}\n\n.creditorid::before {\n    /* Change this to your creditor id (only required if using SEPA direct debit) */\n    content: \"GB18ZZZSDDRB0S00275069\";\n}\n\n.ddcompanyaddress::before {\n    /* Change this to your company address, telephone number and email address respectively */\n    content: \"338-346 Goswell Road, London, EC1V 7LQ, United Kingdom, 020 7183 8674, help@gocardless.com\";\n}  If you are using GoCardless standard, you must leave these fields as they are. If you are not using direct debit, you can ignore these.    Changing the logo \nJust replace the  logo.png  file in the template directory with one of your own. The recommended size is  380x120 , but you can experiment to find a size that works well.    Changing the font \nOpen  style.css , and find the following section:  body {\n    margin: 0;\n    text-align: center;\n    background-color: white;\n    font-family: karla;\n}  Change  karla  to whatever font family you wish to use on the template.    Changing the background colour \nAs above, Open  style.css , and find the following section:  body {\n    margin: 0;\n    text-align: center;\n    background-color: white;\n    font-family: karla;\n}  Change  white  to whatever background colour you wish to use on the template.    Changing the submit button colour \nOpen  style.css , and find the following section:  .submitbutton {\n    ...\n    background-color: #5092DA;\n    ...\n}  Change  #5092DA  to whatever background colour you wish to use for the submit button.    Removing the cancel link \nOpen  style.css , and find the following section:   .cancelbutton {\n     /* Uncomment if a cancel button isn't required on the payment page */\n     /*display: none;*/\n }  Uncomment the  display: none;  as directed (remove the  /*  and  */  either side.)    Removing the \"pay as company\" link \nOpen  style.css , and find the following section:  .label.right.payascompanylink {\n    /* Uncomment to hide the \"pay as company\" link */\n    /*display: none;*/\n}  Uncomment the  display: none;  as directed (remove the  /*  and  */  either side.)", 
            "title": "Standard modifications"
        }, 
        {
            "location": "/templates/#extensive-modifications", 
            "text": "The paypage as provided can be modified to provide it with an entirely custom look - both the HTML markup and the CSS may be changed.  However, extensively modifying the template can be a lot of work, and you can end up needing to re-implement many of the features the original template provides:   Javascript based card type identification from number (IIN range checker)  Start date and issue number fields dynamically displayed (based on card number) when required  Validation of user input, including Luhn algorithm on card number  Third party validation of bank details prior to submission (via Ajax)  UK postcode lookup  Responsive to mobile devices  Payment options set dynamically within Salesforce (Card, Direct debit or Paypal)  Can switch between taking a payment or updating an authorisation  Fully compatible with all modern browsers   Asperato are unable to provide support for templates with extensive modifications.  If you do choose to extensively modify the payment page, then you must read this document thoroughly and adhere to the guidelines.  When your modifications are complete, you must  validate the document . Unless there is a very good reason,  Asperato will not allow invalid HTML to be used on payment pages.", 
            "title": "Extensive modifications"
        }, 
        {
            "location": "/templates/#id-class-attributes", 
            "text": "When modifying the document, please keep the class and ID attributes that are already present, as changing them will break form submission and validation. (Additional class names may be used.)", 
            "title": "ID / class attributes"
        }, 
        {
            "location": "/templates/#additional-js", 
            "text": "Additional Javascript is fine, but please place it in a separate file (where possible) rather than altering the provided \"script.js\" file. We need to manually check the Javascript to make sure it is not malicious in any way, so placing it in a separate file will speed up this process.", 
            "title": "Additional JS"
        }, 
        {
            "location": "/templates/#endpoint-method", 
            "text": "The method must be  POST . Other HTTP methods (such as  GET ) are not supported.    The endpoint (action parameter) must either be  /PMWeb2 , or  /PMWeb2X .    PMWeb2X  will display a gear animation while the payment is processing, but cannot be used with a hosted payment option (such as GoCardless standard or Paypal);    PMWeb2  will not display the gear animation.", 
            "title": "Endpoint &amp; Method"
        }, 
        {
            "location": "/templates/#onload-javascript", 
            "text": "Immediately after the opening body tag, the following must be left in place:  !-- ONLOAD HERE --  This will provide a hook for injecting the Javascript we need to dynamically modify the paypage (based on data collected from Salesforce.)", 
            "title": "Onload Javascript"
        }, 
        {
            "location": "/templates/#postcode-lookup", 
            "text": "You may wish to include a postcode lookup in your page - we have this facility available as a simple JSON endpoint to which you can fire an AJAX request.  Endpoint:   /Asperato/asp/PMPostcode    This will be  https://test.protectedpayments.net/Asperato/asp/PMPostcode  for test and  https://live.protectedpayments.net/Asperato/asp/PMPostcode  for live.    Do not specify the full URL in your Javascript, as the same origin policy will then break the functionality when moving from test to live.    Method:  GET  Parameters:    pc  - this is the postcode to look up. It should be all in lower case and contain no spaces.    session  - this is the value of the  DLsession  parameter on the form.    The response will be given as a JSON array.  For example:   GET   https://test.protectedpayments.net/Asperato/asp/PMPostcode?pc=HD80pq session=1133557799   Response:  [\"22 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"24 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"24a Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"26a Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"28 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"30 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"32 Penistone Road, , , , Kirkburton, Huddersfield, West Yorkshire\",\"Shepley Springs Ltd, Brookfield Mills, Penistone Road, , Kirkburton, Huddersfield, West Yorkshire\",\"Spring Grove Fisheries, 26 Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\",\"Spring Grove Tavern, 20 Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\",\"The Foxglove, 36a Penistone Road, , , Kirkburton, Huddersfield, West Yorkshire\"]  The response can then be used to fill a HTML selection box or similar, and the selected value can be used to populate the required fields on the form.", 
            "title": "Postcode lookup"
        }, 
        {
            "location": "/templates/#field-names", 
            "text": "In all cases here, both the  id  and  name  attributes of the element must be set to the name given. The attribute value is case sensitive.  Taking  DLemail  as an example:  input type=\"text\" name=\"DLemail\" id=\"DLemail\"", 
            "title": "Field names"
        }, 
        {
            "location": "/templates/#required-fields", 
            "text": "The following fields must be specified on the form regardless of payment method or type:", 
            "title": "Required fields"
        }, 
        {
            "location": "/templates/#dlsession", 
            "text": "This is an internally generated session number  (this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)", 
            "title": "DLsession"
        }, 
        {
            "location": "/templates/#dlpaymode", 
            "text": "This is an internally generated session number  (this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)", 
            "title": "DLpayMode"
        }, 
        {
            "location": "/templates/#dlpaytype", 
            "text": "This is an internally generated session number  (this field should be set to \"type=hidden\" and will be automatically populated from Salesforce.)", 
            "title": "DLpayType"
        }, 
        {
            "location": "/templates/#dlfrequency", 
            "text": "The frequency of payment. You may wish to restrict the values to those provided in the \"LabelFrequencyOptions\" field.  Possible values:   ONE  (single payment)  DLY  (daily payment)  WKL  (weekly payment)  MON  (monthly payment)  QTL  (quarterly payment)  SAN  (semi-annual payment)  ANN  (annual payment)", 
            "title": "DLFrequency"
        }, 
        {
            "location": "/templates/#dlamount", 
            "text": "The amount to charge. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.", 
            "title": "DLamount"
        }, 
        {
            "location": "/templates/#dlauthamount", 
            "text": "The amount to authorise. One of DLamount or DLauthAmount must be provided, depending on whether this is a payment template or an authorisation template.", 
            "title": "DLauthAmount"
        }, 
        {
            "location": "/templates/#dlemail", 
            "text": "The email address of the customer.", 
            "title": "DLemail"
        }, 
        {
            "location": "/templates/#labelfrequencyoptions", 
            "text": "The frequency options passed from Salesforce.  (this field should be set to \"type=hidden\" and will be automatically populated from Salesforce. Its \u201cid\u201d attribute must also match the field name.)", 
            "title": "LabelFrequencyOptions"
        }, 
        {
            "location": "/templates/#labelpaymentoptions", 
            "text": "The payment options passed from Salesforce  (this field should be set to \"type=hidden\" and will be automatically populated from Salesforce. Its \u201cid\u201d attribute must also match the field name.)  You may wish to use this field to restrict the payment options - i.e. hide the option to pay via direct debit if it is set to \"card\" or vica versa.", 
            "title": "LabelPaymentOptions"
        }, 
        {
            "location": "/templates/#required-card-fields", 
            "text": "The following fields must (only) be specified if a debit or credit card payment is being made.", 
            "title": "Required card fields"
        }, 
        {
            "location": "/templates/#dlcardnumber", 
            "text": "The long number on the front of the card.", 
            "title": "DLcardNumber"
        }, 
        {
            "location": "/templates/#dlcardtype", 
            "text": "Possible values:    Visa    Mastercard    Amex    Solo    Switch    Maestro    JCB", 
            "title": "DLcardType"
        }, 
        {
            "location": "/templates/#dlcnp", 
            "text": "Set to \"jdi\" if cardholder is not present, otherwise do not specify this parameter.", 
            "title": "DLcnp"
        }, 
        {
            "location": "/templates/#dlcurrency", 
            "text": "The ISO currency code, eg. \"GBP\" for British pounds.", 
            "title": "DLcurrency"
        }, 
        {
            "location": "/templates/#dlexpirydatemonth", 
            "text": "The two digit expiry date month of the card.", 
            "title": "DLexpiryDateMonth"
        }, 
        {
            "location": "/templates/#dlexpirydateyear", 
            "text": "The last two digits of the year the card expires.", 
            "title": "DLexpiryDateYear"
        }, 
        {
            "location": "/templates/#dlcv2", 
            "text": "The 3 digit security code on the back of the card (or the 4 digit code on the top right of the card for Amex.)", 
            "title": "DLcv2"
        }, 
        {
            "location": "/templates/#optional-card-fields", 
            "text": "These fields may be required - they are not for the majority of cards, but some (such as Solo, Maestro and Switch) may need them, so if you expect customers to pay with these cards they should be included.", 
            "title": "Optional card fields"
        }, 
        {
            "location": "/templates/#dlstartdatemonth", 
            "text": "The two digit start date month of the card", 
            "title": "DLstartDateMonth"
        }, 
        {
            "location": "/templates/#dlstartdateyear", 
            "text": "The last two digits of the start date year.", 
            "title": "DLstartDateYear"
        }, 
        {
            "location": "/templates/#dlissuenumber", 
            "text": "The issue number of the card (often \"01\" where it exists.)", 
            "title": "DLissueNumber"
        }, 
        {
            "location": "/templates/#required-direct-debit-ach-fields", 
            "text": "These fields are only required if making a direct debit or ACH payment.", 
            "title": "Required Direct Debit / ACH fields"
        }, 
        {
            "location": "/templates/#dlaccountname", 
            "text": "The full name of the account holder.", 
            "title": "DLaccountName"
        }, 
        {
            "location": "/templates/#dlaccountnumber", 
            "text": "The bank account number.", 
            "title": "DLaccountNumber"
        }, 
        {
            "location": "/templates/#dlsc", 
            "text": "The sort code (direct debit) or routing number (ACH).", 
            "title": "DLsc"
        }, 
        {
            "location": "/templates/#dlaccounttype", 
            "text": "Only necessary for ACH - the account type. Usually \"checking\" or \u201csavings\u201d.", 
            "title": "DLaccountType"
        }, 
        {
            "location": "/templates/#address-fields", 
            "text": "If AVS (address) checking is enabled on your card gateway, then you will need some of these fields. The exact fields you require depends on your gateway settings, but often just the first line of the address ( DLaddress1 ) and the postcode ( DLpostcode ) are required.  For direct debit and ACH payments, the title, forename, lastname, first line of the address, city and postcode are always required.", 
            "title": "Address fields"
        }, 
        {
            "location": "/templates/#dltitle", 
            "text": "The salutation or title.", 
            "title": "DLtitle"
        }, 
        {
            "location": "/templates/#dlforename", 
            "text": "The first name.", 
            "title": "DLforename"
        }, 
        {
            "location": "/templates/#dllastname", 
            "text": "The last name.", 
            "title": "DLlastname"
        }, 
        {
            "location": "/templates/#dladdress1", 
            "text": "The first line of the address.", 
            "title": "DLaddress1"
        }, 
        {
            "location": "/templates/#dladdress2", 
            "text": "The second line of the address.", 
            "title": "DLaddress2"
        }, 
        {
            "location": "/templates/#dlcity", 
            "text": "The town or city of the address", 
            "title": "DLcity"
        }, 
        {
            "location": "/templates/#dlcounty", 
            "text": "The county or state of the address", 
            "title": "DLcounty"
        }, 
        {
            "location": "/templates/#dlcountry", 
            "text": "The country of the address", 
            "title": "DLcountry"
        }, 
        {
            "location": "/templates/#dlpostcode", 
            "text": "The postcode, or zip code of the address.", 
            "title": "DLpostcode"
        }, 
        {
            "location": "/templates/#pre-populating-the-template", 
            "text": "The template will be pre-populated with values for the above parameters if values are provided as part of the URL string.  For example, if the normal URL to the payment page is:  https://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73 campaignRef=431  Then the email can be pre-populated with the following URL:  https://test.protectedpayments.net/Asperato/asp/PMWeb1?pmRef=73 campaignRef=431 DLemail=test@asperato.com", 
            "title": "Pre-populating the template"
        }, 
        {
            "location": "/templates/#direct-debit-legal-requirements", 
            "text": "While the look and feel of both the payment and exit screens can be changed, the following rules must be adhered to if UK direct debit or SEPA payments are being used. These requirements are mandatory and non-negotiable as they are required under UK law.  The example payment page template includes all these requirements, so if you are just modifying the colours, fonts, and logo in use then you need not worry about the contents of this document. If you are developing a template with a radically different look and feel, we will need to send these to GoCardless for verification before they can be used live (this process can typically take a couple of weeks, depending on how many changes are required.)", 
            "title": "Direct Debit Legal Requirements"
        }, 
        {
            "location": "/templates/#payment-page-requirements", 
            "text": "Account name field must be called \u201cAccount name\u201d \nThe label for the account name field must not be changed - it must also be presented in a logical block next to the account number and sort code. (In particular, it cannot be changed just to \u201cname\u201d.)  Retain confirmation that only one user is required to authorise payments. \nThe check box that asks whether multiple signatures are needed to set up a direct debit on this account must be retained.  Confirm customer details before submission. \nThe customer\u2019s bank account details (including account name, account number and sort code) must be relayed back to the customer in a confirmation dialog, with the opportunity to amend these details, before the form is submitted.  Provide your contact details \nYou need to provide the name, address, phone number and email address of your payment provider somewhere on the payment page, usually in the footer. Note that if you are using GoCardless standard, this needs to be kept as GoCardless\u2019 details (included in the sample template.) If you are using GoCardless Pro with your own SUN, then these need to be your own details.  Include a link to the direct debit guarantee \nA link must be clearly visible on the page that points to the direct debit guarantee - the wording of the guarantee needs to stay exactly as it is in the sample template, aside from swapping out the company name. As previously, this needs to be left as GoCardless if GoCardless standard is being used, and changed to your company name if you are using GoCardless Pro with your own SUN.", 
            "title": "Payment page requirements"
        }, 
        {
            "location": "/templates/#confirmation-page-requirements", 
            "text": "Show confirmation of setup \nConfirmation that the direct debit was set up correctly must be displayed.  Provide the mandate as a PDF link \nYou need to provide a link to the Direct Debit mandate as a PDF.  Confirm that the customer will receive an email \nYou need to send the customer an email confirming that the direct debit was setup successfully, along with a link to their mandate (as above.) You need to state that this email will arrive in 3 business days.  Confirm the name on the customer\u2019s bank statement \nYou need to include \u201cThe name on your bank statement will be X\u201d on your confirmation page. X will be \u201cGoCardless\u201d for GoCardless standard customers, and your company name for GoCardless Pro customers using their own SUN.", 
            "title": "Confirmation page requirements"
        }, 
        {
            "location": "/templates/#error-page-requirements", 
            "text": "Confirm that the Direct Debit was not set up \nConfirm to the user that an error occurred, and as a result the direct debit was not set up correctly.", 
            "title": "Error page requirements"
        }
    ]
}